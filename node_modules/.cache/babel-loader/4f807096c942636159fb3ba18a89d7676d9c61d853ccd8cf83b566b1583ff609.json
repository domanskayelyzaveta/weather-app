{"ast":null,"code":"var _jsxFileName = \"/Users/yelezaveta/Desktop/\\u0411\\u0435\\u0437 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u044F/src/components/SearchBar/SearchBar.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { getWeatherThunk } from \"../redux/thunksAPI\";\n// import WeatherCard from \"../Weather/WeatherCard\";\n// import { addToFavorites } from \"../redux/slice\";\n// import { selectWeather } from \"../redux/selectors\";\n// import { nanoid } from \"nanoid\";\n// import { StyledInput } from \"./SearchBar.styled\";\n// import { AsyncPaginate } from \"react-select-async-paginate\";\n\n// import Select from \"react-select\";\n\n// const SearchBar = () => {\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [selectedCity, setSelectedCity] = useState(null);\n\n//   const dispatch = useDispatch();\n//   const weatherData = useSelector(selectWeather);\n//   // const favorites = useSelector(selectFavorites);\n\n//   useEffect(() => {\n//     dispatch(getWeatherThunk(searchTerm));\n//   }, [dispatch, searchTerm]);\n\n//   const handleInputChange = async (event) => {\n//     const value = event.target.value;\n//     setSearchTerm(value);\n//     if (value.trim() === \"\") {\n//       setSearchResults([]);\n//       return;\n//     }\n//     setLoading(true);\n//     try {\n//       const response = await fetch(\n//         `https://api.openweathermap.org/geo/1.0/direct?q=${value}&limit=5&appid=18431911169fef4afbe92c0ef62b8409`\n//       );\n//       const data = await response.json();\n//       setSearchResults(data);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//     setLoading(false);\n//   };\n\n//   // const handleKeyPress = (event) => {\n//   //   if (event.key === \"Enter\") {\n//   //     if (selectedCity) {\n//   //       console.log(\"Show weather card for selected city:\", selectedCity);\n//   //     } else {\n//   //       console.log(\"Show city list\");\n//   //     }\n//   //   }\n//   // };\n\n//   const handleCitySelect = (city) => {\n//     setSelectedCity(city);\n//     setSearchResults([]);\n//     setSearchTerm(\"\"); // якщо треба глянем\n//   };\n\n//   // const handleAddClick = () => {\n//   //   if (selectedCity) {\n//   //     onAddToFavorites(selectedCity);\n//   //     dispatch(addToFavorites(selectedCity));\n//   //     setSelectedCity(null);\n//   //   }\n//   // };\n\n//   const handleAddClick = () => {\n//     if (selectedCity) {\n//       dispatch(addToFavorites(weatherData));\n//       setSelectedCity(null);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <AsyncPaginate\n//         type=\"text\"\n//         value={searchTerm}\n//         onChange={handleInputChange}\n//         // onKeyDown={handleKeyPress}\n//         placeholder=\"Type a city name...\"\n//       />\n//       <div>\n//         {/* {loading && <p>Loading...</p>} */}\n//         {/* {!loading && searchResults.length === 0 && <p>No results found.</p>} */}\n//         {searchResults?.map((city) => (\n//           <div key={nanoid()} onClick={() => handleCitySelect(city)}>\n//             {city.name}\n//           </div>\n//         ))}\n//         {selectedCity && (\n//           <WeatherCard\n//             key={nanoid()}\n//             city={selectedCity.name}\n//             temperature={selectedCity.temperature}\n//             wind={selectedCity.wind}\n//             humidity={selectedCity.humidity}\n//           />\n//         )}\n//         <button onClick={handleAddClick}>Add</button>\n//       </div>\n\n//       <div>\n//         <ul>\n//           {selectedCity && (\n//             <div>\n//               {/* {weatherData?.list.map((weatherDataItem) => ( */}\n//               {weatherData?.list.slice(0, 1).map((weatherDataItem) => (\n//                 <WeatherCard key={nanoid()} weatherData={weatherDataItem} />\n//               ))}\n//             </div>\n//           )}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SearchBar;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getWeatherThunk } from \"../redux/thunksAPI\";\nimport WeatherCard from \"../Weather/WeatherCard\";\nimport { addToFavorites } from \"../redux/slice\";\nimport { selectFavorites, selectWeather } from \"../redux/selectors\";\nimport { nanoid } from \"nanoid\";\nimport { SearchBarWrapper, StyledAddBtn, StyledInput } from \"./SearchBar.styled\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = () => {\n  _s();\n  var _weatherData$list;\n  const [loading, setLoading] = useState(false);\n  const [selectedCity, setSelectedCity] = useState(null);\n  const [selectedCityFromSearch, setSelectedCityFromSearch] = useState(null);\n  const dispatch = useDispatch();\n  const weatherData = useSelector(selectWeather);\n  const favorites = useSelector(selectFavorites);\n  useEffect(() => {\n    if (selectedCity) {\n      dispatch(getWeatherThunk(selectedCity.label));\n    }\n  }, [dispatch, selectedCity]);\n  const loadOptions = async (inputValue, loadedOptions) => {\n    if (inputValue.trim() === \"\") {\n      return {\n        options: []\n      };\n    }\n    try {\n      setLoading(true);\n      const response = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${inputValue}&limit=5&appid=18431911169fef4afbe92c0ef62b8409`);\n      const data = await response.json();\n      const options = data.map(city => ({\n        value: `${city.name}, ${city.country}`,\n        label: `${city.name}, ${city.country}`\n      }));\n      return {\n        options\n      };\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      return {\n        options: []\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleCitySelect = selectedOption => {\n    setSelectedCity(selectedOption);\n  };\n  const handleAddClick = () => {\n    if (selectedCity) {\n      dispatch(addToFavorites(weatherData));\n      setSelectedCity(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SearchBarWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(AsyncPaginate, {\n        value: selectedCity,\n        loadOptions: loadOptions,\n        onChange: handleCitySelect,\n        isClearable: true,\n        isLoading: loading,\n        placeholder: \"Type a city name...\",\n        styles: customStyles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledAddBtn, {\n        onClick: handleAddClick,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), selectedCityFromSearch && !favorites.some(city => city.id === selectedCityFromSearch.id) && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: weatherData === null || weatherData === void 0 ? void 0 : (_weatherData$list = weatherData.list) === null || _weatherData$list === void 0 ? void 0 : _weatherData$list.slice(0, 1).map(weatherDataItem => /*#__PURE__*/_jsxDEV(WeatherCard, {\n        weatherData: weatherDataItem\n      }, nanoid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"aS+lMHXlqPQGXdgX6UKkzACvw7Q=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = SearchBar;\nexport default SearchBar;\nconst customStyles = {\n  control: (provided, state) => ({\n    ...provided,\n    borderColor: state.isFocused ? \"#00ff00\" : \"#cccccc\",\n    backgroundColor: \"#FFFFFF\",\n    backgroundPosition: \"0% 0%\",\n    backgroundRepeat: \"no-repeat\",\n    boxShadow: \"0px 3px 6px #00000029\",\n    borderRadius: \"5px\",\n    border: \"none\",\n    width: \"659px\"\n  }),\n  indicatorSeparator: (provided, state) => ({\n    ...provided,\n    display: \"none\"\n  }),\n  dropdownIndicator: (provided, state) => ({\n    ...provided,\n    display: \"none\"\n  }),\n  option: (provided, state) => ({\n    ...provided,\n    color: state.isSelected ? \"#666666\" : \"inherit\",\n    backgroundColor: state.isFocused ? \"#F2F2F2\" : \"inherit\"\n  })\n};\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","getWeatherThunk","WeatherCard","addToFavorites","selectFavorites","selectWeather","nanoid","SearchBarWrapper","StyledAddBtn","StyledInput","AsyncPaginate","jsxDEV","_jsxDEV","SearchBar","_s","_weatherData$list","loading","setLoading","selectedCity","setSelectedCity","selectedCityFromSearch","setSelectedCityFromSearch","dispatch","weatherData","favorites","label","loadOptions","inputValue","loadedOptions","trim","options","response","fetch","data","json","map","city","value","name","country","error","console","handleCitySelect","selectedOption","handleAddClick","children","onChange","isClearable","isLoading","placeholder","styles","customStyles","fileName","_jsxFileName","lineNumber","columnNumber","onClick","some","id","list","slice","weatherDataItem","_c","control","provided","state","borderColor","isFocused","backgroundColor","backgroundPosition","backgroundRepeat","boxShadow","borderRadius","border","width","indicatorSeparator","display","dropdownIndicator","option","color","isSelected","$RefreshReg$"],"sources":["/Users/yelezaveta/Desktop/Без названия/src/components/SearchBar/SearchBar.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { getWeatherThunk } from \"../redux/thunksAPI\";\n// import WeatherCard from \"../Weather/WeatherCard\";\n// import { addToFavorites } from \"../redux/slice\";\n// import { selectWeather } from \"../redux/selectors\";\n// import { nanoid } from \"nanoid\";\n// import { StyledInput } from \"./SearchBar.styled\";\n// import { AsyncPaginate } from \"react-select-async-paginate\";\n\n// import Select from \"react-select\";\n\n// const SearchBar = () => {\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [selectedCity, setSelectedCity] = useState(null);\n\n//   const dispatch = useDispatch();\n//   const weatherData = useSelector(selectWeather);\n//   // const favorites = useSelector(selectFavorites);\n\n//   useEffect(() => {\n//     dispatch(getWeatherThunk(searchTerm));\n//   }, [dispatch, searchTerm]);\n\n//   const handleInputChange = async (event) => {\n//     const value = event.target.value;\n//     setSearchTerm(value);\n//     if (value.trim() === \"\") {\n//       setSearchResults([]);\n//       return;\n//     }\n//     setLoading(true);\n//     try {\n//       const response = await fetch(\n//         `https://api.openweathermap.org/geo/1.0/direct?q=${value}&limit=5&appid=18431911169fef4afbe92c0ef62b8409`\n//       );\n//       const data = await response.json();\n//       setSearchResults(data);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//     setLoading(false);\n//   };\n\n//   // const handleKeyPress = (event) => {\n//   //   if (event.key === \"Enter\") {\n//   //     if (selectedCity) {\n//   //       console.log(\"Show weather card for selected city:\", selectedCity);\n//   //     } else {\n//   //       console.log(\"Show city list\");\n//   //     }\n//   //   }\n//   // };\n\n//   const handleCitySelect = (city) => {\n//     setSelectedCity(city);\n//     setSearchResults([]);\n//     setSearchTerm(\"\"); // якщо треба глянем\n//   };\n\n//   // const handleAddClick = () => {\n//   //   if (selectedCity) {\n//   //     onAddToFavorites(selectedCity);\n//   //     dispatch(addToFavorites(selectedCity));\n//   //     setSelectedCity(null);\n//   //   }\n//   // };\n\n//   const handleAddClick = () => {\n//     if (selectedCity) {\n//       dispatch(addToFavorites(weatherData));\n//       setSelectedCity(null);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <AsyncPaginate\n//         type=\"text\"\n//         value={searchTerm}\n//         onChange={handleInputChange}\n//         // onKeyDown={handleKeyPress}\n//         placeholder=\"Type a city name...\"\n//       />\n//       <div>\n//         {/* {loading && <p>Loading...</p>} */}\n//         {/* {!loading && searchResults.length === 0 && <p>No results found.</p>} */}\n//         {searchResults?.map((city) => (\n//           <div key={nanoid()} onClick={() => handleCitySelect(city)}>\n//             {city.name}\n//           </div>\n//         ))}\n//         {selectedCity && (\n//           <WeatherCard\n//             key={nanoid()}\n//             city={selectedCity.name}\n//             temperature={selectedCity.temperature}\n//             wind={selectedCity.wind}\n//             humidity={selectedCity.humidity}\n//           />\n//         )}\n//         <button onClick={handleAddClick}>Add</button>\n//       </div>\n\n//       <div>\n//         <ul>\n//           {selectedCity && (\n//             <div>\n//               {/* {weatherData?.list.map((weatherDataItem) => ( */}\n//               {weatherData?.list.slice(0, 1).map((weatherDataItem) => (\n//                 <WeatherCard key={nanoid()} weatherData={weatherDataItem} />\n//               ))}\n//             </div>\n//           )}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SearchBar;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getWeatherThunk } from \"../redux/thunksAPI\";\nimport WeatherCard from \"../Weather/WeatherCard\";\nimport { addToFavorites } from \"../redux/slice\";\nimport { selectFavorites, selectWeather } from \"../redux/selectors\";\nimport { nanoid } from \"nanoid\";\nimport {\n  SearchBarWrapper,\n  StyledAddBtn,\n  StyledInput,\n} from \"./SearchBar.styled\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\n\nconst SearchBar = () => {\n  const [loading, setLoading] = useState(false);\n  const [selectedCity, setSelectedCity] = useState(null);\n  const [selectedCityFromSearch, setSelectedCityFromSearch] = useState(null);\n\n  const dispatch = useDispatch();\n  const weatherData = useSelector(selectWeather);\n\n  const favorites = useSelector(selectFavorites);\n\n  useEffect(() => {\n    if (selectedCity) {\n      dispatch(getWeatherThunk(selectedCity.label));\n    }\n  }, [dispatch, selectedCity]);\n\n  const loadOptions = async (inputValue, loadedOptions) => {\n    if (inputValue.trim() === \"\") {\n      return { options: [] };\n    }\n\n    try {\n      setLoading(true);\n      const response = await fetch(\n        `https://api.openweathermap.org/geo/1.0/direct?q=${inputValue}&limit=5&appid=18431911169fef4afbe92c0ef62b8409`\n      );\n      const data = await response.json();\n      const options = data.map((city) => ({\n        value: `${city.name}, ${city.country}`,\n        label: `${city.name}, ${city.country}`,\n      }));\n      return { options };\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      return { options: [] };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCitySelect = (selectedOption) => {\n    setSelectedCity(selectedOption);\n  };\n\n  const handleAddClick = () => {\n    if (selectedCity) {\n      dispatch(addToFavorites(weatherData));\n      setSelectedCity(null);\n    }\n  };\n\n  return (\n    <div>\n      <SearchBarWrapper>\n        <AsyncPaginate\n          value={selectedCity}\n          loadOptions={loadOptions}\n          onChange={handleCitySelect}\n          isClearable={true}\n          isLoading={loading}\n          placeholder=\"Type a city name...\"\n          styles={customStyles}\n        />\n        <StyledAddBtn onClick={handleAddClick}>Add</StyledAddBtn>\n      </SearchBarWrapper>\n\n      {/* <div>\n        {selectedCity && (\n          <WeatherCard\n            key={nanoid()}\n            city={selectedCity.label}\n            temperature={selectedCity.temperature}\n            wind={selectedCity.wind}\n            humidity={selectedCity.humidity}\n          />\n        )}\n      </div> */}\n\n      {/* <div>\n        <ul>\n          {selectedCityFromSearch && (\n            <div>\n              {weatherData?.list?.slice(0, 1).map((weatherDataItem) => (\n                <WeatherCard key={nanoid()} weatherData={weatherDataItem} />\n              ))}\n            </div>\n          )}\n        </ul>\n      </div> */}\n\n      {selectedCityFromSearch &&\n        !favorites.some((city) => city.id === selectedCityFromSearch.id) && (\n          <div>\n            {weatherData?.list?.slice(0, 1).map((weatherDataItem) => (\n              <WeatherCard key={nanoid()} weatherData={weatherDataItem} />\n            ))}\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default SearchBar;\n\nconst customStyles = {\n  control: (provided, state) => ({\n    ...provided,\n    borderColor: state.isFocused ? \"#00ff00\" : \"#cccccc\",\n    backgroundColor: \"#FFFFFF\",\n    backgroundPosition: \"0% 0%\",\n    backgroundRepeat: \"no-repeat\",\n    boxShadow: \"0px 3px 6px #00000029\",\n    borderRadius: \"5px\",\n    border: \"none\",\n    width: \"659px\",\n  }),\n  indicatorSeparator: (provided, state) => ({\n    ...provided,\n    display: \"none\",\n  }),\n  dropdownIndicator: (provided, state) => ({\n    ...provided,\n    display: \"none\",\n  }),\n  option: (provided, state) => ({\n    ...provided,\n    color: state.isSelected ? \"#666666\" : \"inherit\",\n    backgroundColor: state.isFocused ? \"#F2F2F2\" : \"inherit\",\n  }),\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}