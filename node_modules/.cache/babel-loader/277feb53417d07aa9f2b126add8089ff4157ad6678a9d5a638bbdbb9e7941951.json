{"ast":null,"code":"var _jsxFileName = \"/Users/yelezaveta/Desktop/\\u0411\\u0435\\u0437 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u044F/src/components/Weather/WeatherCard.jsx\",\n  _s = $RefreshSig$();\n// // import React from \"react\";\n// import { useSelector } from \"react-redux\";\n// import { selectWeather } from \"../redux/selectors\";\n// import {\n//   DateParagraph,\n//   DegSpan,\n//   DegSwitcherDiv,\n//   Img,\n//   MainWeatherInfoP,\n//   OrangeSpan,\n//   ParagraphSun,\n//   StyledChartDiv,\n//   StyledDegreeBtn,\n//   StyledFeelsPar,\n//   StyledImgSunDiv,\n//   StyledTemperature,\n//   StyledTitleWrapper,\n//   StyledWeatherInfoDiv,\n//   TemperatureDiv,\n//   TitleH2,\n//   WeatherCardWrapper,\n//   WeatherInfoDiv,\n// } from \"./WeatherCard.styled\";\n// // import moment from \"moment\";\n// import Chart from \"../Chart/Chart\";\n// import { useState } from \"react\";\n// import { useTranslation } from \"react-i18next\";\n// import { formatDate, convertTemperature } from \"../../helpers\";\n\n// const WeatherCard = ({ weatherData }) => {\n//   const { t } = useTranslation();\n\n//   const weather = useSelector(selectWeather);\n\n//   const [unit, setUnit] = useState(\"celsius\");\n\n//   const cityName = weather?.city?.name;\n//   const country = weather?.city?.country;\n//   const icon = weatherData?.weather[0].icon;\n//   const weatherStatus = weatherData?.weather[0]?.main;\n\n//   const iconUrl = `http://openweathermap.org/img/wn/${icon}.png`;\n\n//   if (\n//     !weatherData ||\n//     !weatherData.main ||\n//     !weatherData.weather ||\n//     !weatherData.wind\n//   ) {\n//     return;\n//   }\n\n//   const sunnyWeatherStatus =\n//     weatherStatus === \"Clear\" ? t(\"Sunny\") : t(weatherStatus);\n\n//   // const formatDate = (dateString) => {\n//   //   const date = moment(dateString);\n//   //   const formattedDate = date.format(\"ddd, D MMMM, HH:mm\");\n\n//   //   return formattedDate;\n//   // };\n\n//   const originalDate = weatherData?.dt_txt;\n//   const formattedDate = formatDate(originalDate);\n\n//   const temperature = convertTemperature(weatherData.main.temp, unit);\n//   const feelsLikeTemperature = convertTemperature(\n//     weatherData.main.feels_like,\n//     unit\n//   );\n\n//   // const convertTemperature = (value) => {\n//   //   if (unit === \"celsius\") {\n//   //     return value;\n//   //   } else {\n//   //     return Math.round((value * 9) / 5 + 32);\n//   //   }\n//   // };\n\n//   const cardBackgroundColor =\n//     Math.round(convertTemperature(weatherData.main.temp)) < 0\n//       ? \"#F1F2FF\"\n//       : \"#FFFAF1\";\n\n//   const spanColor =\n//     Math.round(convertTemperature(weatherData.main.temp)) < 0\n//       ? \"#459DE9\"\n//       : \"#FFA25B\";\n\n//   return (\n//     <WeatherCardWrapper backgroundColor={cardBackgroundColor}>\n//       <StyledTitleWrapper>\n//         <TitleH2>\n//           {cityName || weatherData.name}, {country || weatherData.sys.country}\n//         </TitleH2>\n//         <StyledImgSunDiv>\n//           <Img src={iconUrl} alt=\"sun\" />\n//           <ParagraphSun>{sunnyWeatherStatus}</ParagraphSun>\n//         </StyledImgSunDiv>\n//       </StyledTitleWrapper>\n\n//       <DateParagraph>{formattedDate}</DateParagraph>\n\n//       <StyledChartDiv>\n//         <Chart data={weather.list} />\n//       </StyledChartDiv>\n\n//       <StyledWeatherInfoDiv>\n//         <TemperatureDiv>\n//           <StyledTemperature>\n//             {Math.round(convertTemperature(temperature, unit)) > 0\n//               ? \"+\" + Math.round(convertTemperature(temperature, unit))\n//               : Math.round(convertTemperature(temperature, unit))}\n//           </StyledTemperature>\n\n//           <StyledFeelsPar>\n//             {t(\"feels_like\")}:&nbsp;\n//             <DegSpan>\n//               {Math.round(convertTemperature(feelsLikeTemperature))}\n//               &nbsp;\n//               {unit === \"celsius\" ? \"°C\" : \"°F\"}\n//             </DegSpan>\n//           </StyledFeelsPar>\n\n//           <DegSwitcherDiv>\n//             <StyledDegreeBtn\n//               onClick={() => setUnit(\"celsius\")}\n//               $active={unit === \"celsius\"}\n//             >\n//               °C\n//             </StyledDegreeBtn>\n//             <StyledDegreeBtn\n//               onClick={() => setUnit(\"fahrenheit\")}\n//               $active={unit === \"fahrenheit\"}\n//             >\n//               °F\n//             </StyledDegreeBtn>\n//           </DegSwitcherDiv>\n//         </TemperatureDiv>\n\n//         <WeatherInfoDiv>\n//           <MainWeatherInfoP>\n//             {t(\"wind\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.wind.speed}m/s\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//           <MainWeatherInfoP>\n//             {t(\"humidity\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.main.humidity}%\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//           <MainWeatherInfoP>\n//             {t(\"pressure\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.main.pressure}Pa\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//         </WeatherInfoDiv>\n//       </StyledWeatherInfoDiv>\n//     </WeatherCardWrapper>\n//   );\n// };\n\n// export default WeatherCard;\n\nimport React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectWeather } from \"../redux/selectors\";\nimport { DateParagraph, DegSpan, DegSwitcherDiv, Img, MainWeatherInfoP, OrangeSpan, ParagraphSun, StyledChartDiv, StyledDegreeBtn, StyledFeelsPar, StyledImgSunDiv, StyledTemperature, StyledTitleWrapper, StyledWeatherInfoDiv, TemperatureDiv, TitleH2, WeatherCardWrapper, WeatherInfoDiv } from \"./WeatherCard.styled\";\nimport moment from \"moment\";\nimport Chart from \"../Chart/Chart\";\nimport { useTranslation } from \"react-i18next\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherCard = ({\n  weatherData\n}) => {\n  _s();\n  var _weather$city, _weather$city2, _weatherData$weather$;\n  const {\n    t\n  } = useTranslation();\n  const weather = useSelector(selectWeather);\n  const [unit, setUnit] = useState(\"celsius\");\n  const cityName = weather === null || weather === void 0 ? void 0 : (_weather$city = weather.city) === null || _weather$city === void 0 ? void 0 : _weather$city.name;\n  const country = weather === null || weather === void 0 ? void 0 : (_weather$city2 = weather.city) === null || _weather$city2 === void 0 ? void 0 : _weather$city2.country;\n  const icon = weatherData === null || weatherData === void 0 ? void 0 : weatherData.weather[0].icon;\n  const weatherStatus = weatherData === null || weatherData === void 0 ? void 0 : (_weatherData$weather$ = weatherData.weather[0]) === null || _weatherData$weather$ === void 0 ? void 0 : _weatherData$weather$.main;\n  const iconUrl = `http://openweathermap.org/img/wn/${icon}.png`;\n  if (!weatherData || !weatherData.main || !weatherData.weather || !weatherData.wind) {\n    return;\n  }\n  const sunnyWeatherStatus = weatherStatus === \"Clear\" ? t(\"Sunny\") : t(weatherStatus);\n  const formatDate = dateString => {\n    const date = moment(dateString);\n    return date.format(\"ddd, D MMMM, HH:mm\");\n  };\n  const originalDate = weatherData === null || weatherData === void 0 ? void 0 : weatherData.dt_txt;\n  const formattedDate = formatDate(originalDate);\n  const convertTemperature = (value, unit) => {\n    if (unit === \"celsius\") {\n      return value;\n    } else {\n      // Учтем случай, если значение уже в градусах Фаренгейта\n      if (value >= -459.67 && value <= 1000) {\n        return Math.round(value);\n      }\n      return Math.round(value * 9 / 5 + 32);\n    }\n  };\n  const temperature = convertTemperature(weatherData.main.temp, unit);\n  const feelsLikeTemperature = convertTemperature(weatherData.main.feels_like, unit);\n  const cardBackgroundColor = Math.round(temperature) < 0 ? \"#F1F2FF\" : \"#FFFAF1\";\n  const spanColor = Math.round(temperature) < 0 ? \"#459DE9\" : \"#FFA25B\";\n  return /*#__PURE__*/_jsxDEV(WeatherCardWrapper, {\n    backgroundColor: cardBackgroundColor,\n    children: [/*#__PURE__*/_jsxDEV(StyledTitleWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(TitleH2, {\n        children: [cityName || weatherData.name, \", \", country || weatherData.sys.country]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledImgSunDiv, {\n        children: [/*#__PURE__*/_jsxDEV(Img, {\n          src: iconUrl,\n          alt: \"sun\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ParagraphSun, {\n          children: sunnyWeatherStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DateParagraph, {\n      children: formattedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledChartDiv, {\n      children: /*#__PURE__*/_jsxDEV(Chart, {\n        data: weather.list\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledWeatherInfoDiv, {\n      children: [/*#__PURE__*/_jsxDEV(TemperatureDiv, {\n        children: [/*#__PURE__*/_jsxDEV(StyledTemperature, {\n          children: Math.round(temperature) > 0 ? \"+\" + Math.round(temperature) : Math.round(temperature)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyledFeelsPar, {\n          children: [t(\"feels_like\"), \":\\xA0\", /*#__PURE__*/_jsxDEV(DegSpan, {\n            children: [Math.round(feelsLikeTemperature), \"\\xA0\", unit === \"celsius\" ? \"°C\" : \"°F\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DegSwitcherDiv, {\n          children: [/*#__PURE__*/_jsxDEV(StyledDegreeBtn, {\n            onClick: () => setUnit(\"celsius\"),\n            $active: unit === \"celsius\",\n            children: \"\\xB0C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StyledDegreeBtn, {\n            onClick: () => setUnit(\"fahrenheit\"),\n            $active: unit === \"fahrenheit\",\n            children: \"\\xB0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WeatherInfoDiv, {\n        children: [/*#__PURE__*/_jsxDEV(MainWeatherInfoP, {\n          children: [t(\"wind\"), \": \\xA0\", /*#__PURE__*/_jsxDEV(OrangeSpan, {\n            color: spanColor,\n            children: [weatherData.wind.speed, \"m/s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MainWeatherInfoP, {\n          children: [t(\"humidity\"), \": \\xA0\", /*#__PURE__*/_jsxDEV(OrangeSpan, {\n            color: spanColor,\n            children: [weatherData.main.humidity, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MainWeatherInfoP, {\n          children: [t(\"pressure\"), \": \\xA0\", /*#__PURE__*/_jsxDEV(OrangeSpan, {\n            color: spanColor,\n            children: [weatherData.main.pressure, \"Pa\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherCard, \"ubMzTaat6zh3i41Llr1s2YF6V5w=\", false, function () {\n  return [useTranslation, useSelector];\n});\n_c = WeatherCard;\nexport default WeatherCard;\nvar _c;\n$RefreshReg$(_c, \"WeatherCard\");","map":{"version":3,"names":["React","useState","useSelector","selectWeather","DateParagraph","DegSpan","DegSwitcherDiv","Img","MainWeatherInfoP","OrangeSpan","ParagraphSun","StyledChartDiv","StyledDegreeBtn","StyledFeelsPar","StyledImgSunDiv","StyledTemperature","StyledTitleWrapper","StyledWeatherInfoDiv","TemperatureDiv","TitleH2","WeatherCardWrapper","WeatherInfoDiv","moment","Chart","useTranslation","jsxDEV","_jsxDEV","WeatherCard","weatherData","_s","_weather$city","_weather$city2","_weatherData$weather$","t","weather","unit","setUnit","cityName","city","name","country","icon","weatherStatus","main","iconUrl","wind","sunnyWeatherStatus","formatDate","dateString","date","format","originalDate","dt_txt","formattedDate","convertTemperature","value","Math","round","temperature","temp","feelsLikeTemperature","feels_like","cardBackgroundColor","spanColor","backgroundColor","children","sys","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","data","list","onClick","$active","color","speed","humidity","pressure","_c","$RefreshReg$"],"sources":["/Users/yelezaveta/Desktop/Без названия/src/components/Weather/WeatherCard.jsx"],"sourcesContent":["// // import React from \"react\";\n// import { useSelector } from \"react-redux\";\n// import { selectWeather } from \"../redux/selectors\";\n// import {\n//   DateParagraph,\n//   DegSpan,\n//   DegSwitcherDiv,\n//   Img,\n//   MainWeatherInfoP,\n//   OrangeSpan,\n//   ParagraphSun,\n//   StyledChartDiv,\n//   StyledDegreeBtn,\n//   StyledFeelsPar,\n//   StyledImgSunDiv,\n//   StyledTemperature,\n//   StyledTitleWrapper,\n//   StyledWeatherInfoDiv,\n//   TemperatureDiv,\n//   TitleH2,\n//   WeatherCardWrapper,\n//   WeatherInfoDiv,\n// } from \"./WeatherCard.styled\";\n// // import moment from \"moment\";\n// import Chart from \"../Chart/Chart\";\n// import { useState } from \"react\";\n// import { useTranslation } from \"react-i18next\";\n// import { formatDate, convertTemperature } from \"../../helpers\";\n\n// const WeatherCard = ({ weatherData }) => {\n//   const { t } = useTranslation();\n\n//   const weather = useSelector(selectWeather);\n\n//   const [unit, setUnit] = useState(\"celsius\");\n\n//   const cityName = weather?.city?.name;\n//   const country = weather?.city?.country;\n//   const icon = weatherData?.weather[0].icon;\n//   const weatherStatus = weatherData?.weather[0]?.main;\n\n//   const iconUrl = `http://openweathermap.org/img/wn/${icon}.png`;\n\n//   if (\n//     !weatherData ||\n//     !weatherData.main ||\n//     !weatherData.weather ||\n//     !weatherData.wind\n//   ) {\n//     return;\n//   }\n\n//   const sunnyWeatherStatus =\n//     weatherStatus === \"Clear\" ? t(\"Sunny\") : t(weatherStatus);\n\n//   // const formatDate = (dateString) => {\n//   //   const date = moment(dateString);\n//   //   const formattedDate = date.format(\"ddd, D MMMM, HH:mm\");\n\n//   //   return formattedDate;\n//   // };\n\n//   const originalDate = weatherData?.dt_txt;\n//   const formattedDate = formatDate(originalDate);\n\n//   const temperature = convertTemperature(weatherData.main.temp, unit);\n//   const feelsLikeTemperature = convertTemperature(\n//     weatherData.main.feels_like,\n//     unit\n//   );\n\n//   // const convertTemperature = (value) => {\n//   //   if (unit === \"celsius\") {\n//   //     return value;\n//   //   } else {\n//   //     return Math.round((value * 9) / 5 + 32);\n//   //   }\n//   // };\n\n//   const cardBackgroundColor =\n//     Math.round(convertTemperature(weatherData.main.temp)) < 0\n//       ? \"#F1F2FF\"\n//       : \"#FFFAF1\";\n\n//   const spanColor =\n//     Math.round(convertTemperature(weatherData.main.temp)) < 0\n//       ? \"#459DE9\"\n//       : \"#FFA25B\";\n\n//   return (\n//     <WeatherCardWrapper backgroundColor={cardBackgroundColor}>\n//       <StyledTitleWrapper>\n//         <TitleH2>\n//           {cityName || weatherData.name}, {country || weatherData.sys.country}\n//         </TitleH2>\n//         <StyledImgSunDiv>\n//           <Img src={iconUrl} alt=\"sun\" />\n//           <ParagraphSun>{sunnyWeatherStatus}</ParagraphSun>\n//         </StyledImgSunDiv>\n//       </StyledTitleWrapper>\n\n//       <DateParagraph>{formattedDate}</DateParagraph>\n\n//       <StyledChartDiv>\n//         <Chart data={weather.list} />\n//       </StyledChartDiv>\n\n//       <StyledWeatherInfoDiv>\n//         <TemperatureDiv>\n//           <StyledTemperature>\n//             {Math.round(convertTemperature(temperature, unit)) > 0\n//               ? \"+\" + Math.round(convertTemperature(temperature, unit))\n//               : Math.round(convertTemperature(temperature, unit))}\n//           </StyledTemperature>\n\n//           <StyledFeelsPar>\n//             {t(\"feels_like\")}:&nbsp;\n//             <DegSpan>\n//               {Math.round(convertTemperature(feelsLikeTemperature))}\n//               &nbsp;\n//               {unit === \"celsius\" ? \"°C\" : \"°F\"}\n//             </DegSpan>\n//           </StyledFeelsPar>\n\n//           <DegSwitcherDiv>\n//             <StyledDegreeBtn\n//               onClick={() => setUnit(\"celsius\")}\n//               $active={unit === \"celsius\"}\n//             >\n//               °C\n//             </StyledDegreeBtn>\n//             <StyledDegreeBtn\n//               onClick={() => setUnit(\"fahrenheit\")}\n//               $active={unit === \"fahrenheit\"}\n//             >\n//               °F\n//             </StyledDegreeBtn>\n//           </DegSwitcherDiv>\n//         </TemperatureDiv>\n\n//         <WeatherInfoDiv>\n//           <MainWeatherInfoP>\n//             {t(\"wind\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.wind.speed}m/s\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//           <MainWeatherInfoP>\n//             {t(\"humidity\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.main.humidity}%\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//           <MainWeatherInfoP>\n//             {t(\"pressure\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.main.pressure}Pa\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//         </WeatherInfoDiv>\n//       </StyledWeatherInfoDiv>\n//     </WeatherCardWrapper>\n//   );\n// };\n\n// export default WeatherCard;\n\nimport React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectWeather } from \"../redux/selectors\";\nimport {\n  DateParagraph,\n  DegSpan,\n  DegSwitcherDiv,\n  Img,\n  MainWeatherInfoP,\n  OrangeSpan,\n  ParagraphSun,\n  StyledChartDiv,\n  StyledDegreeBtn,\n  StyledFeelsPar,\n  StyledImgSunDiv,\n  StyledTemperature,\n  StyledTitleWrapper,\n  StyledWeatherInfoDiv,\n  TemperatureDiv,\n  TitleH2,\n  WeatherCardWrapper,\n  WeatherInfoDiv,\n} from \"./WeatherCard.styled\";\nimport moment from \"moment\";\nimport Chart from \"../Chart/Chart\";\nimport { useTranslation } from \"react-i18next\";\n\nconst WeatherCard = ({ weatherData }) => {\n  const { t } = useTranslation();\n\n  const weather = useSelector(selectWeather);\n\n  const [unit, setUnit] = useState(\"celsius\");\n\n  const cityName = weather?.city?.name;\n  const country = weather?.city?.country;\n  const icon = weatherData?.weather[0].icon;\n  const weatherStatus = weatherData?.weather[0]?.main;\n\n  const iconUrl = `http://openweathermap.org/img/wn/${icon}.png`;\n\n  if (\n    !weatherData ||\n    !weatherData.main ||\n    !weatherData.weather ||\n    !weatherData.wind\n  ) {\n    return;\n  }\n\n  const sunnyWeatherStatus =\n    weatherStatus === \"Clear\" ? t(\"Sunny\") : t(weatherStatus);\n\n  const formatDate = (dateString) => {\n    const date = moment(dateString);\n    return date.format(\"ddd, D MMMM, HH:mm\");\n  };\n\n  const originalDate = weatherData?.dt_txt;\n  const formattedDate = formatDate(originalDate);\n\n  const convertTemperature = (value, unit) => {\n    if (unit === \"celsius\") {\n      return value;\n    } else {\n      // Учтем случай, если значение уже в градусах Фаренгейта\n      if (value >= -459.67 && value <= 1000) {\n        return Math.round(value);\n      }\n      return Math.round((value * 9) / 5 + 32);\n    }\n  };\n\n  const temperature = convertTemperature(weatherData.main.temp, unit);\n  const feelsLikeTemperature = convertTemperature(\n    weatherData.main.feels_like,\n    unit\n  );\n\n  const cardBackgroundColor =\n    Math.round(temperature) < 0 ? \"#F1F2FF\" : \"#FFFAF1\";\n\n  const spanColor = Math.round(temperature) < 0 ? \"#459DE9\" : \"#FFA25B\";\n\n  return (\n    <WeatherCardWrapper backgroundColor={cardBackgroundColor}>\n      <StyledTitleWrapper>\n        <TitleH2>\n          {cityName || weatherData.name}, {country || weatherData.sys.country}\n        </TitleH2>\n        <StyledImgSunDiv>\n          <Img src={iconUrl} alt=\"sun\" />\n          <ParagraphSun>{sunnyWeatherStatus}</ParagraphSun>\n        </StyledImgSunDiv>\n      </StyledTitleWrapper>\n\n      <DateParagraph>{formattedDate}</DateParagraph>\n\n      <StyledChartDiv>\n        <Chart data={weather.list} />\n      </StyledChartDiv>\n\n      <StyledWeatherInfoDiv>\n        <TemperatureDiv>\n          <StyledTemperature>\n            {Math.round(temperature) > 0\n              ? \"+\" + Math.round(temperature)\n              : Math.round(temperature)}\n          </StyledTemperature>\n\n          <StyledFeelsPar>\n            {t(\"feels_like\")}:&nbsp;\n            <DegSpan>\n              {Math.round(feelsLikeTemperature)}\n              &nbsp;\n              {unit === \"celsius\" ? \"°C\" : \"°F\"}\n            </DegSpan>\n          </StyledFeelsPar>\n\n          <DegSwitcherDiv>\n            <StyledDegreeBtn\n              onClick={() => setUnit(\"celsius\")}\n              $active={unit === \"celsius\"}\n            >\n              °C\n            </StyledDegreeBtn>\n            <StyledDegreeBtn\n              onClick={() => setUnit(\"fahrenheit\")}\n              $active={unit === \"fahrenheit\"}\n            >\n              °F\n            </StyledDegreeBtn>\n          </DegSwitcherDiv>\n        </TemperatureDiv>\n\n        <WeatherInfoDiv>\n          <MainWeatherInfoP>\n            {t(\"wind\")}: &nbsp;\n            <OrangeSpan color={spanColor}>\n              {weatherData.wind.speed}m/s\n            </OrangeSpan>\n          </MainWeatherInfoP>\n          <MainWeatherInfoP>\n            {t(\"humidity\")}: &nbsp;\n            <OrangeSpan color={spanColor}>\n              {weatherData.main.humidity}%\n            </OrangeSpan>\n          </MainWeatherInfoP>\n          <MainWeatherInfoP>\n            {t(\"pressure\")}: &nbsp;\n            <OrangeSpan color={spanColor}>\n              {weatherData.main.pressure}Pa\n            </OrangeSpan>\n          </MainWeatherInfoP>\n        </WeatherInfoDiv>\n      </StyledWeatherInfoDiv>\n    </WeatherCardWrapper>\n  );\n};\n\nexport default WeatherCard;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SACEC,aAAa,EACbC,OAAO,EACPC,cAAc,EACdC,GAAG,EACHC,gBAAgB,EAChBC,UAAU,EACVC,YAAY,EACZC,cAAc,EACdC,eAAe,EACfC,cAAc,EACdC,eAAe,EACfC,iBAAiB,EACjBC,kBAAkB,EAClBC,oBAAoB,EACpBC,cAAc,EACdC,OAAO,EACPC,kBAAkB,EAClBC,cAAc,QACT,sBAAsB;AAC7B,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,KAAK,MAAM,gBAAgB;AAClC,SAASC,cAAc,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,WAAW,GAAG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"},"metadata":{},"sourceType":"module","externalDependencies":[]}