{"ast":null,"code":"var _jsxFileName = \"/Users/yelezaveta/Desktop/\\u0411\\u0435\\u0437 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u044F/src/App.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React, { useState, useEffect } from \"react\";\n// import WeatherList from \"./components/Weather/WeatherList\";\n// import { useSelector } from \"react-redux\";\n// import SearchBar from \"./components/SearchBar/SearchBar\";\n// import WeatherCard from \"./components/Weather/WeatherCard\";\n// import { selectFavorites } from \"./components/redux/selectors\";\n// import Header from \"./components/Header/Header\";\n// import { I18nextProvider } from \"react-i18next\";\n// import i18n from \"./i18n\";\n// import axios from \"axios\";\n// import { addToFavorites } from \"./components/redux/slice\";\n\n// const App = () => {\n//   const [cities, setCities] = useState([]);\n//   const favorites = useSelector(selectFavorites);\n//   const [weatherData, setWeatherData] = useState(null);\n\n//   useEffect(() => {\n//     currentLocationWeather();\n//   }, []);\n\n//   const currentLocationWeather = () => {\n//     navigator.geolocation.getCurrentPosition(\n//       async (position) => {\n//         const { latitude, longitude } = position.coords;\n//         try {\n//           const response = await axios.get(\n//             `https://api.openweathermap.org/data/2.5/weather`,\n//             {\n//               params: {\n//                 lat: latitude,\n//                 lon: longitude,\n//                 appid: \"18431911169fef4afbe92c0ef62b8409\",\n//                 units: \"metric\",\n//               },\n//             }\n//           );\n//           const weatherData = response.data;\n//           setWeatherData(weatherData);\n//         } catch (error) {\n//           console.error(\"Error fetching weather data:\", error);\n//         }\n//       },\n//       (error) => {\n//         console.error(\"Error getting current location:\", error);\n//       }\n//     );\n//   };\n\n//   return (\n//     <I18nextProvider i18n={i18n}>\n//       <div className=\"container\">\n//         <Header />\n//         <SearchBar\n//           cities={cities}\n//           setCities={setCities}\n//           addToFavorites={addToFavorites}\n//         />\n//         {weatherData && <WeatherCard weatherData={weatherData} />}\n//         {favorites.length > 0 && <WeatherList cities={cities} />}\n//       </div>\n//     </I18nextProvider>\n//   );\n// };\n\n// export default App;\n\nconst App = () => {\n  _s();\n  const [cities, setCities] = useState([]);\n  const favorites = useSelector(selectFavorites);\n  const [weatherData, setWeatherData] = useState(null);\n  const [inputWeatherData, setInputWeatherData] = useState(null); // Данные о погоде из инпута\n\n  useEffect(() => {\n    currentLocationWeather();\n  }, []);\n  const currentLocationWeather = () => {\n    navigator.geolocation.getCurrentPosition(async position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      try {\n        const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather`, {\n          params: {\n            lat: latitude,\n            lon: longitude,\n            appid: \"18431911169fef4afbe92c0ef62b8409\",\n            units: \"metric\"\n          }\n        });\n        const weatherData = response.data;\n        setWeatherData(weatherData);\n      } catch (error) {\n        console.error(\"Error fetching weather data:\", error);\n        // Если произошла ошибка при получении данных о геопозиции, отображаем данные из инпута\n        if (inputWeatherData) {\n          setWeatherData(inputWeatherData);\n        }\n      }\n    }, error => {\n      console.error(\"Error getting current location:\", error);\n      // Если произошла ошибка при получении данных о геопозиции, отображаем данные из инпута\n      if (inputWeatherData) {\n        setWeatherData(inputWeatherData);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(I18nextProvider, {\n    i18n: i18n,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        cities: cities,\n        setCities: setCities,\n        addToFavorites: addToFavorites\n        // Callback для передачи данных о погоде из инпута в App\n        ,\n        setInputWeatherData: setInputWeatherData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), weatherData && /*#__PURE__*/_jsxDEV(WeatherCard, {\n        weatherData: weatherData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 25\n      }, this), favorites.length > 0 && /*#__PURE__*/_jsxDEV(WeatherList, {\n        cities: cities\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"zca9OkpBCQcoPbvphy6TU1DJ68k=\", true);\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","_s","cities","setCities","useState","favorites","useSelector","selectFavorites","weatherData","setWeatherData","inputWeatherData","setInputWeatherData","useEffect","currentLocationWeather","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","response","axios","get","params","lat","lon","appid","units","data","error","console","_jsxDEV","I18nextProvider","i18n","children","className","Header","fileName","_jsxFileName","lineNumber","columnNumber","SearchBar","addToFavorites","WeatherCard","length","WeatherList","_c","$RefreshReg$"],"sources":["/Users/yelezaveta/Desktop/Без названия/src/App.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import WeatherList from \"./components/Weather/WeatherList\";\n// import { useSelector } from \"react-redux\";\n// import SearchBar from \"./components/SearchBar/SearchBar\";\n// import WeatherCard from \"./components/Weather/WeatherCard\";\n// import { selectFavorites } from \"./components/redux/selectors\";\n// import Header from \"./components/Header/Header\";\n// import { I18nextProvider } from \"react-i18next\";\n// import i18n from \"./i18n\";\n// import axios from \"axios\";\n// import { addToFavorites } from \"./components/redux/slice\";\n\n// const App = () => {\n//   const [cities, setCities] = useState([]);\n//   const favorites = useSelector(selectFavorites);\n//   const [weatherData, setWeatherData] = useState(null);\n\n//   useEffect(() => {\n//     currentLocationWeather();\n//   }, []);\n\n//   const currentLocationWeather = () => {\n//     navigator.geolocation.getCurrentPosition(\n//       async (position) => {\n//         const { latitude, longitude } = position.coords;\n//         try {\n//           const response = await axios.get(\n//             `https://api.openweathermap.org/data/2.5/weather`,\n//             {\n//               params: {\n//                 lat: latitude,\n//                 lon: longitude,\n//                 appid: \"18431911169fef4afbe92c0ef62b8409\",\n//                 units: \"metric\",\n//               },\n//             }\n//           );\n//           const weatherData = response.data;\n//           setWeatherData(weatherData);\n//         } catch (error) {\n//           console.error(\"Error fetching weather data:\", error);\n//         }\n//       },\n//       (error) => {\n//         console.error(\"Error getting current location:\", error);\n//       }\n//     );\n//   };\n\n//   return (\n//     <I18nextProvider i18n={i18n}>\n//       <div className=\"container\">\n//         <Header />\n//         <SearchBar\n//           cities={cities}\n//           setCities={setCities}\n//           addToFavorites={addToFavorites}\n//         />\n//         {weatherData && <WeatherCard weatherData={weatherData} />}\n//         {favorites.length > 0 && <WeatherList cities={cities} />}\n//       </div>\n//     </I18nextProvider>\n//   );\n// };\n\n// export default App;\n\nconst App = () => {\n  const [cities, setCities] = useState([]);\n  const favorites = useSelector(selectFavorites);\n  const [weatherData, setWeatherData] = useState(null);\n  const [inputWeatherData, setInputWeatherData] = useState(null); // Данные о погоде из инпута\n\n  useEffect(() => {\n    currentLocationWeather();\n  }, []);\n\n  const currentLocationWeather = () => {\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        const { latitude, longitude } = position.coords;\n        try {\n          const response = await axios.get(\n            `https://api.openweathermap.org/data/2.5/weather`,\n            {\n              params: {\n                lat: latitude,\n                lon: longitude,\n                appid: \"18431911169fef4afbe92c0ef62b8409\",\n                units: \"metric\",\n              },\n            }\n          );\n          const weatherData = response.data;\n          setWeatherData(weatherData);\n        } catch (error) {\n          console.error(\"Error fetching weather data:\", error);\n          // Если произошла ошибка при получении данных о геопозиции, отображаем данные из инпута\n          if (inputWeatherData) {\n            setWeatherData(inputWeatherData);\n          }\n        }\n      },\n      (error) => {\n        console.error(\"Error getting current location:\", error);\n        // Если произошла ошибка при получении данных о геопозиции, отображаем данные из инпута\n        if (inputWeatherData) {\n          setWeatherData(inputWeatherData);\n        }\n      }\n    );\n  };\n\n  return (\n    <I18nextProvider i18n={i18n}>\n      <div className=\"container\">\n        <Header />\n        <SearchBar\n          cities={cities}\n          setCities={setCities}\n          addToFavorites={addToFavorites}\n          // Callback для передачи данных о погоде из инпута в App\n          setInputWeatherData={setInputWeatherData}\n        />\n        {weatherData && <WeatherCard weatherData={weatherData} />}\n        {favorites.length > 0 && <WeatherList cities={cities} />}\n      </div>\n    </I18nextProvider>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}