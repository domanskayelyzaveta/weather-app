{"ast":null,"code":"var _jsxFileName = \"/Users/yelezaveta/Desktop/\\u0411\\u0435\\u0437 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u044F/src/components/Weather/WeatherCard.jsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectWeather } from \"../redux/selectors\";\nimport { DateParagraph, DegSpan, DegSwitcherDiv, Img, MainWeatherInfoP, OrangeSpan, ParagraphSun, StyledChartDiv, StyledDegreeBtn, StyledFeelsPar, StyledImgSunDiv, StyledTemperature, StyledTitleWrapper, StyledWeatherInfoDiv, TemperatureDiv, TitleH2, WeatherCardWrapper, WeatherInfoDiv } from \"./WeatherCard.styled\";\n// import moment from \"moment\";\nimport Chart from \"../Chart/Chart\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { formatDate, convertTemperature } from \"../../helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherCard = ({\n  weatherData\n}) => {\n  _s();\n  var _weatherData$weather$, _weatherData$weather$2, _weather$list$, _weather$list$$weathe, _weather$list$2, _weather$list$2$weath;\n  const {\n    t\n  } = useTranslation();\n  const weather = useSelector(selectWeather);\n  const [unit, setUnit] = useState(\"celsius\");\n  const weatherStatus = weatherData === null || weatherData === void 0 ? void 0 : (_weatherData$weather$ = weatherData.weather[0]) === null || _weatherData$weather$ === void 0 ? void 0 : _weatherData$weather$.main;\n  const icon = weatherData === null || weatherData === void 0 ? void 0 : (_weatherData$weather$2 = weatherData.weather[0]) === null || _weatherData$weather$2 === void 0 ? void 0 : _weatherData$weather$2.icon;\n\n  // const cityName = weather?.city?.name;\n  // const country = weather?.city?.country;\n  // const temp =\n  //   weather?.list?.[0]?.main?.temp !== undefined\n  //     ? weather.list[0].main.temp\n  //     : null;\n\n  console.log(\"WEATHERDATA:\", weatherData);\n  console.log(\"icon:\", (weather === null || weather === void 0 ? void 0 : (_weather$list$ = weather.list[0]) === null || _weather$list$ === void 0 ? void 0 : (_weather$list$$weathe = _weather$list$.weather) === null || _weather$list$$weathe === void 0 ? void 0 : _weather$list$$weathe.icon) !== undefined ? weather === null || weather === void 0 ? void 0 : (_weather$list$2 = weather.list[0]) === null || _weather$list$2 === void 0 ? void 0 : (_weather$list$2$weath = _weather$list$2.weather) === null || _weather$list$2$weath === void 0 ? void 0 : _weather$list$2$weath.icon : null);\n  const iconUrl = `http://openweathermap.org/img/wn/${icon}.png`;\n  if (!weatherData || !weatherData.main || !weatherData.weather || !weatherData.wind) {\n    return;\n  }\n  const sunnyWeatherStatus = weatherStatus === \"Clear\" ? t(\"Sunny\") : t(weatherStatus);\n\n  // const formatDate = (dateString) => {\n  //   const date = moment(dateString);\n  //   const formattedDate = date.format(\"ddd, D MMMM, HH:mm\");\n\n  //   return formattedDate;\n  // };\n\n  const originalDate = weatherData === null || weatherData === void 0 ? void 0 : weatherData.dt_txt;\n  const formattedDate = formatDate(originalDate);\n\n  // const temperature = convertTemperature(weatherData.main.temp, unit);\n  // const feelsLikeTemperature = convertTemperature(\n  //   weatherData.main.feels_like,\n  //   unit\n  // );\n\n  // const convertTemperature = (value) => {\n  //   if (unit === \"celsius\") {\n  //     return value;\n  //   } else {\n  //     return Math.round((value * 9) / 5 + 32);\n  //   }\n  // };\n\n  // const convertedTemp = Math.round(\n  //   convertTemperature(weatherData.main.temp, unit)\n  // );\n\n  const cardBackgroundColor = Math.round(convertTemperature(weatherData.main.temp)) < 0 ? \"#F1F2FF\" : \"#FFFAF1\";\n  const spanColor = Math.round(convertTemperature(weatherData.main.temp)) < 0 ? \"#459DE9\" : \"#FFA25B\";\n  return /*#__PURE__*/_jsxDEV(WeatherCardWrapper, {\n    backgroundColor: cardBackgroundColor,\n    children: [/*#__PURE__*/_jsxDEV(StyledTitleWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(TitleH2, {\n        children: [weatherData.name, \", \", weatherData.sys.country]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledImgSunDiv, {\n        children: [/*#__PURE__*/_jsxDEV(Img, {\n          src: iconUrl,\n          alt: \"sun\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ParagraphSun, {\n          children: sunnyWeatherStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DateParagraph, {\n      children: formattedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledChartDiv, {\n      children: /*#__PURE__*/_jsxDEV(Chart, {\n        data: weather.list\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledWeatherInfoDiv, {\n      children: [/*#__PURE__*/_jsxDEV(TemperatureDiv, {\n        children: [/*#__PURE__*/_jsxDEV(StyledTemperature, {\n          children: Math.round(convertTemperature(weatherData.main.temp, unit)) > 0 ? \"+\" + Math.round(convertTemperature(weatherData.main.temp, unit)) : Math.round(convertTemperature(weatherData.main.temp, unit))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyledFeelsPar, {\n          children: [t(\"feels_like\"), \":\\xA0\", /*#__PURE__*/_jsxDEV(DegSpan, {\n            children: [Math.round(convertTemperature(weatherData.main.feels_like, unit)), \"\\xA0\", unit === \"celsius\" ? \"°C\" : \"°F\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DegSwitcherDiv, {\n          children: [/*#__PURE__*/_jsxDEV(StyledDegreeBtn, {\n            onClick: () => setUnit(\"celsius\"),\n            $active: unit === \"celsius\",\n            children: \"\\xB0C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StyledDegreeBtn, {\n            onClick: () => setUnit(\"fahrenheit\"),\n            $active: unit === \"fahrenheit\",\n            children: \"\\xB0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WeatherInfoDiv, {\n        children: [/*#__PURE__*/_jsxDEV(MainWeatherInfoP, {\n          children: [t(\"wind\"), \": \\xA0\", /*#__PURE__*/_jsxDEV(OrangeSpan, {\n            color: spanColor,\n            children: [weatherData.wind.speed, \"m/s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MainWeatherInfoP, {\n          children: [t(\"humidity\"), \": \\xA0\", /*#__PURE__*/_jsxDEV(OrangeSpan, {\n            color: spanColor,\n            children: [weatherData.main.humidity, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MainWeatherInfoP, {\n          children: [t(\"pressure\"), \": \\xA0\", /*#__PURE__*/_jsxDEV(OrangeSpan, {\n            color: spanColor,\n            children: [weatherData.main.pressure, \"Pa\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherCard, \"ubMzTaat6zh3i41Llr1s2YF6V5w=\", false, function () {\n  return [useTranslation, useSelector];\n});\n_c = WeatherCard;\nexport default WeatherCard;\n\n// return (\n//     <WeatherCardWrapper backgroundColor={cardBackgroundColor}>\n//       <StyledTitleWrapper>\n//         <TitleH2>\n//           {cityName || weatherData.name}, {country || weatherData.sys.country}\n//         </TitleH2>\n//         <StyledImgSunDiv>\n//           <Img src={iconUrl} alt=\"sun\" />\n//           <ParagraphSun>\n//             {sunnyWeatherStatus || weatherData.sys.country}\n//           </ParagraphSun>\n//         </StyledImgSunDiv>\n//       </StyledTitleWrapper>\n\n//       <DateParagraph>{formattedDate}</DateParagraph>\n\n//       <StyledChartDiv>\n//         <Chart data={weather.list} />\n//       </StyledChartDiv>\n\n//       <StyledWeatherInfoDiv>\n//         <TemperatureDiv>\n//           <StyledTemperature>\n//             {Math.round(convertTemperature(weatherData.main.temp, unit)) > 0\n//               ? \"+\" +\n//                 Math.round(convertTemperature(weatherData.main.temp, unit))\n//               : Math.round(convertTemperature(weatherData.main.temp, unit))}\n//           </StyledTemperature>\n\n//           {/* <StyledTemperature>\n//             {convertedTemp > 0 ? \"+\" + convertedTemp : convertedTemp}\n//           </StyledTemperature> */}\n\n//           <StyledFeelsPar>\n//             {t(\"feels_like\")}:&nbsp;\n//             <DegSpan>\n//               {Math.round(\n//                 convertTemperature(weatherData.main.feels_like, unit)\n//               )}\n//               &nbsp;\n//               {unit === \"celsius\" ? \"°C\" : \"°F\"}\n//             </DegSpan>\n//           </StyledFeelsPar>\n\n//           <DegSwitcherDiv>\n//             <StyledDegreeBtn\n//               onClick={() => setUnit(\"celsius\")}\n//               $active={unit === \"celsius\"}\n//             >\n//               °C\n//             </StyledDegreeBtn>\n//             <StyledDegreeBtn\n//               onClick={() => setUnit(\"fahrenheit\")}\n//               $active={unit === \"fahrenheit\"}\n//             >\n//               °F\n//             </StyledDegreeBtn>\n//           </DegSwitcherDiv>\n//         </TemperatureDiv>\n\n//         <WeatherInfoDiv>\n//           <MainWeatherInfoP>\n//             {t(\"wind\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.wind.speed}m/s\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//           <MainWeatherInfoP>\n//             {t(\"humidity\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.main.humidity}%\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//           <MainWeatherInfoP>\n//             {t(\"pressure\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.main.pressure}Pa\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//         </WeatherInfoDiv>\n//       </StyledWeatherInfoDiv>\n//     </WeatherCardWrapper>\n//   );\n// };\n\n// export default WeatherCard;\n// return (\n//     <WeatherCardWrapper backgroundColor={cardBackgroundColor}>\n//       <StyledTitleWrapper>\n//         <TitleH2>\n//           {cityName || weatherData.name}, {country || weatherData.sys.country}\n//         </TitleH2>\n//         <StyledImgSunDiv>\n//           <Img src={iconUrl} alt=\"sun\" />\n//           <ParagraphSun>\n//             {sunnyWeatherStatus || weatherData.sys.country}\n//           </ParagraphSun>\n//         </StyledImgSunDiv>\n//       </StyledTitleWrapper>\n\n//       <DateParagraph>{formattedDate}</DateParagraph>\n\n//       <StyledChartDiv>\n//         <Chart data={weather.list} />\n//       </StyledChartDiv>\n\n//       <StyledWeatherInfoDiv>\n//         <TemperatureDiv>\n//           <StyledTemperature>\n//             {Math.round(convertTemperature(weatherData.main.temp, unit)) > 0\n//               ? \"+\" +\n//                 Math.round(convertTemperature(weatherData.main.temp, unit))\n//               : Math.round(convertTemperature(weatherData.main.temp, unit))}\n//           </StyledTemperature>\n\n//           {/* <StyledTemperature>\n//             {convertedTemp > 0 ? \"+\" + convertedTemp : convertedTemp}\n//           </StyledTemperature> */}\n\n//           <StyledFeelsPar>\n//             {t(\"feels_like\")}:&nbsp;\n//             <DegSpan>\n//               {Math.round(\n//                 convertTemperature(weatherData.main.feels_like, unit)\n//               )}\n//               &nbsp;\n//               {unit === \"celsius\" ? \"°C\" : \"°F\"}\n//             </DegSpan>\n//           </StyledFeelsPar>\n\n//           <DegSwitcherDiv>\n//             <StyledDegreeBtn\n//               onClick={() => setUnit(\"celsius\")}\n//               $active={unit === \"celsius\"}\n//             >\n//               °C\n//             </StyledDegreeBtn>\n//             <StyledDegreeBtn\n//               onClick={() => setUnit(\"fahrenheit\")}\n//               $active={unit === \"fahrenheit\"}\n//             >\n//               °F\n//             </StyledDegreeBtn>\n//           </DegSwitcherDiv>\n//         </TemperatureDiv>\n\n//         <WeatherInfoDiv>\n//           <MainWeatherInfoP>\n//             {t(\"wind\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.wind.speed}m/s\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//           <MainWeatherInfoP>\n//             {t(\"humidity\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.main.humidity}%\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//           <MainWeatherInfoP>\n//             {t(\"pressure\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.main.pressure}Pa\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//         </WeatherInfoDiv>\n//       </StyledWeatherInfoDiv>\n//     </WeatherCardWrapper>\n//   );\n// };\n\n// export default WeatherCard;\nvar _c;\n$RefreshReg$(_c, \"WeatherCard\");","map":{"version":3,"names":["useSelector","selectWeather","DateParagraph","DegSpan","DegSwitcherDiv","Img","MainWeatherInfoP","OrangeSpan","ParagraphSun","StyledChartDiv","StyledDegreeBtn","StyledFeelsPar","StyledImgSunDiv","StyledTemperature","StyledTitleWrapper","StyledWeatherInfoDiv","TemperatureDiv","TitleH2","WeatherCardWrapper","WeatherInfoDiv","Chart","useState","useTranslation","formatDate","convertTemperature","jsxDEV","_jsxDEV","WeatherCard","weatherData","_s","_weatherData$weather$","_weatherData$weather$2","_weather$list$","_weather$list$$weathe","_weather$list$2","_weather$list$2$weath","t","weather","unit","setUnit","weatherStatus","main","icon","console","log","list","undefined","iconUrl","wind","sunnyWeatherStatus","originalDate","dt_txt","formattedDate","cardBackgroundColor","Math","round","temp","spanColor","backgroundColor","children","name","sys","country","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","data","feels_like","onClick","$active","color","speed","humidity","pressure","_c","$RefreshReg$"],"sources":["/Users/yelezaveta/Desktop/Без названия/src/components/Weather/WeatherCard.jsx"],"sourcesContent":["// import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectWeather } from \"../redux/selectors\";\nimport {\n  DateParagraph,\n  DegSpan,\n  DegSwitcherDiv,\n  Img,\n  MainWeatherInfoP,\n  OrangeSpan,\n  ParagraphSun,\n  StyledChartDiv,\n  StyledDegreeBtn,\n  StyledFeelsPar,\n  StyledImgSunDiv,\n  StyledTemperature,\n  StyledTitleWrapper,\n  StyledWeatherInfoDiv,\n  TemperatureDiv,\n  TitleH2,\n  WeatherCardWrapper,\n  WeatherInfoDiv,\n} from \"./WeatherCard.styled\";\n// import moment from \"moment\";\nimport Chart from \"../Chart/Chart\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { formatDate, convertTemperature } from \"../../helpers\";\n\nconst WeatherCard = ({ weatherData }) => {\n  const { t } = useTranslation();\n\n  const weather = useSelector(selectWeather);\n\n  const [unit, setUnit] = useState(\"celsius\");\n\n  const weatherStatus = weatherData?.weather[0]?.main;\n  const icon = weatherData?.weather[0]?.icon;\n\n  // const cityName = weather?.city?.name;\n  // const country = weather?.city?.country;\n  // const temp =\n  //   weather?.list?.[0]?.main?.temp !== undefined\n  //     ? weather.list[0].main.temp\n  //     : null;\n\n  console.log(\"WEATHERDATA:\", weatherData);\n  console.log(\n    \"icon:\",\n    weather?.list[0]?.weather?.icon !== undefined\n      ? weather?.list[0]?.weather?.icon\n      : null\n  );\n\n  const iconUrl = `http://openweathermap.org/img/wn/${icon}.png`;\n\n  if (\n    !weatherData ||\n    !weatherData.main ||\n    !weatherData.weather ||\n    !weatherData.wind\n  ) {\n    return;\n  }\n\n  const sunnyWeatherStatus =\n    weatherStatus === \"Clear\" ? t(\"Sunny\") : t(weatherStatus);\n\n  // const formatDate = (dateString) => {\n  //   const date = moment(dateString);\n  //   const formattedDate = date.format(\"ddd, D MMMM, HH:mm\");\n\n  //   return formattedDate;\n  // };\n\n  const originalDate = weatherData?.dt_txt;\n  const formattedDate = formatDate(originalDate);\n\n  // const temperature = convertTemperature(weatherData.main.temp, unit);\n  // const feelsLikeTemperature = convertTemperature(\n  //   weatherData.main.feels_like,\n  //   unit\n  // );\n\n  // const convertTemperature = (value) => {\n  //   if (unit === \"celsius\") {\n  //     return value;\n  //   } else {\n  //     return Math.round((value * 9) / 5 + 32);\n  //   }\n  // };\n\n  // const convertedTemp = Math.round(\n  //   convertTemperature(weatherData.main.temp, unit)\n  // );\n\n  const cardBackgroundColor =\n    Math.round(convertTemperature(weatherData.main.temp)) < 0\n      ? \"#F1F2FF\"\n      : \"#FFFAF1\";\n\n  const spanColor =\n    Math.round(convertTemperature(weatherData.main.temp)) < 0\n      ? \"#459DE9\"\n      : \"#FFA25B\";\n\n  return (\n    <WeatherCardWrapper backgroundColor={cardBackgroundColor}>\n      <StyledTitleWrapper>\n        <TitleH2>\n          {weatherData.name}, {weatherData.sys.country}\n        </TitleH2>\n        <StyledImgSunDiv>\n          <Img src={iconUrl} alt=\"sun\" />\n          <ParagraphSun>{sunnyWeatherStatus}</ParagraphSun>\n        </StyledImgSunDiv>\n      </StyledTitleWrapper>\n\n      <DateParagraph>{formattedDate}</DateParagraph>\n\n      <StyledChartDiv>\n        <Chart data={weather.list} />\n      </StyledChartDiv>\n\n      <StyledWeatherInfoDiv>\n        <TemperatureDiv>\n          <StyledTemperature>\n            {Math.round(convertTemperature(weatherData.main.temp, unit)) > 0\n              ? \"+\" +\n                Math.round(convertTemperature(weatherData.main.temp, unit))\n              : Math.round(convertTemperature(weatherData.main.temp, unit))}\n          </StyledTemperature>\n\n          {/* <StyledTemperature>\n            {convertedTemp > 0 ? \"+\" + convertedTemp : convertedTemp}\n          </StyledTemperature> */}\n\n          <StyledFeelsPar>\n            {t(\"feels_like\")}:&nbsp;\n            <DegSpan>\n              {Math.round(\n                convertTemperature(weatherData.main.feels_like, unit)\n              )}\n              &nbsp;\n              {unit === \"celsius\" ? \"°C\" : \"°F\"}\n            </DegSpan>\n          </StyledFeelsPar>\n\n          <DegSwitcherDiv>\n            <StyledDegreeBtn\n              onClick={() => setUnit(\"celsius\")}\n              $active={unit === \"celsius\"}\n            >\n              °C\n            </StyledDegreeBtn>\n            <StyledDegreeBtn\n              onClick={() => setUnit(\"fahrenheit\")}\n              $active={unit === \"fahrenheit\"}\n            >\n              °F\n            </StyledDegreeBtn>\n          </DegSwitcherDiv>\n        </TemperatureDiv>\n\n        <WeatherInfoDiv>\n          <MainWeatherInfoP>\n            {t(\"wind\")}: &nbsp;\n            <OrangeSpan color={spanColor}>\n              {weatherData.wind.speed}m/s\n            </OrangeSpan>\n          </MainWeatherInfoP>\n          <MainWeatherInfoP>\n            {t(\"humidity\")}: &nbsp;\n            <OrangeSpan color={spanColor}>\n              {weatherData.main.humidity}%\n            </OrangeSpan>\n          </MainWeatherInfoP>\n          <MainWeatherInfoP>\n            {t(\"pressure\")}: &nbsp;\n            <OrangeSpan color={spanColor}>\n              {weatherData.main.pressure}Pa\n            </OrangeSpan>\n          </MainWeatherInfoP>\n        </WeatherInfoDiv>\n      </StyledWeatherInfoDiv>\n    </WeatherCardWrapper>\n  );\n};\n\nexport default WeatherCard;\n\n// return (\n//     <WeatherCardWrapper backgroundColor={cardBackgroundColor}>\n//       <StyledTitleWrapper>\n//         <TitleH2>\n//           {cityName || weatherData.name}, {country || weatherData.sys.country}\n//         </TitleH2>\n//         <StyledImgSunDiv>\n//           <Img src={iconUrl} alt=\"sun\" />\n//           <ParagraphSun>\n//             {sunnyWeatherStatus || weatherData.sys.country}\n//           </ParagraphSun>\n//         </StyledImgSunDiv>\n//       </StyledTitleWrapper>\n\n//       <DateParagraph>{formattedDate}</DateParagraph>\n\n//       <StyledChartDiv>\n//         <Chart data={weather.list} />\n//       </StyledChartDiv>\n\n//       <StyledWeatherInfoDiv>\n//         <TemperatureDiv>\n//           <StyledTemperature>\n//             {Math.round(convertTemperature(weatherData.main.temp, unit)) > 0\n//               ? \"+\" +\n//                 Math.round(convertTemperature(weatherData.main.temp, unit))\n//               : Math.round(convertTemperature(weatherData.main.temp, unit))}\n//           </StyledTemperature>\n\n//           {/* <StyledTemperature>\n//             {convertedTemp > 0 ? \"+\" + convertedTemp : convertedTemp}\n//           </StyledTemperature> */}\n\n//           <StyledFeelsPar>\n//             {t(\"feels_like\")}:&nbsp;\n//             <DegSpan>\n//               {Math.round(\n//                 convertTemperature(weatherData.main.feels_like, unit)\n//               )}\n//               &nbsp;\n//               {unit === \"celsius\" ? \"°C\" : \"°F\"}\n//             </DegSpan>\n//           </StyledFeelsPar>\n\n//           <DegSwitcherDiv>\n//             <StyledDegreeBtn\n//               onClick={() => setUnit(\"celsius\")}\n//               $active={unit === \"celsius\"}\n//             >\n//               °C\n//             </StyledDegreeBtn>\n//             <StyledDegreeBtn\n//               onClick={() => setUnit(\"fahrenheit\")}\n//               $active={unit === \"fahrenheit\"}\n//             >\n//               °F\n//             </StyledDegreeBtn>\n//           </DegSwitcherDiv>\n//         </TemperatureDiv>\n\n//         <WeatherInfoDiv>\n//           <MainWeatherInfoP>\n//             {t(\"wind\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.wind.speed}m/s\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//           <MainWeatherInfoP>\n//             {t(\"humidity\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.main.humidity}%\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//           <MainWeatherInfoP>\n//             {t(\"pressure\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.main.pressure}Pa\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//         </WeatherInfoDiv>\n//       </StyledWeatherInfoDiv>\n//     </WeatherCardWrapper>\n//   );\n// };\n\n// export default WeatherCard;\n// return (\n//     <WeatherCardWrapper backgroundColor={cardBackgroundColor}>\n//       <StyledTitleWrapper>\n//         <TitleH2>\n//           {cityName || weatherData.name}, {country || weatherData.sys.country}\n//         </TitleH2>\n//         <StyledImgSunDiv>\n//           <Img src={iconUrl} alt=\"sun\" />\n//           <ParagraphSun>\n//             {sunnyWeatherStatus || weatherData.sys.country}\n//           </ParagraphSun>\n//         </StyledImgSunDiv>\n//       </StyledTitleWrapper>\n\n//       <DateParagraph>{formattedDate}</DateParagraph>\n\n//       <StyledChartDiv>\n//         <Chart data={weather.list} />\n//       </StyledChartDiv>\n\n//       <StyledWeatherInfoDiv>\n//         <TemperatureDiv>\n//           <StyledTemperature>\n//             {Math.round(convertTemperature(weatherData.main.temp, unit)) > 0\n//               ? \"+\" +\n//                 Math.round(convertTemperature(weatherData.main.temp, unit))\n//               : Math.round(convertTemperature(weatherData.main.temp, unit))}\n//           </StyledTemperature>\n\n//           {/* <StyledTemperature>\n//             {convertedTemp > 0 ? \"+\" + convertedTemp : convertedTemp}\n//           </StyledTemperature> */}\n\n//           <StyledFeelsPar>\n//             {t(\"feels_like\")}:&nbsp;\n//             <DegSpan>\n//               {Math.round(\n//                 convertTemperature(weatherData.main.feels_like, unit)\n//               )}\n//               &nbsp;\n//               {unit === \"celsius\" ? \"°C\" : \"°F\"}\n//             </DegSpan>\n//           </StyledFeelsPar>\n\n//           <DegSwitcherDiv>\n//             <StyledDegreeBtn\n//               onClick={() => setUnit(\"celsius\")}\n//               $active={unit === \"celsius\"}\n//             >\n//               °C\n//             </StyledDegreeBtn>\n//             <StyledDegreeBtn\n//               onClick={() => setUnit(\"fahrenheit\")}\n//               $active={unit === \"fahrenheit\"}\n//             >\n//               °F\n//             </StyledDegreeBtn>\n//           </DegSwitcherDiv>\n//         </TemperatureDiv>\n\n//         <WeatherInfoDiv>\n//           <MainWeatherInfoP>\n//             {t(\"wind\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.wind.speed}m/s\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//           <MainWeatherInfoP>\n//             {t(\"humidity\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.main.humidity}%\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//           <MainWeatherInfoP>\n//             {t(\"pressure\")}: &nbsp;\n//             <OrangeSpan color={spanColor}>\n//               {weatherData.main.pressure}Pa\n//             </OrangeSpan>\n//           </MainWeatherInfoP>\n//         </WeatherInfoDiv>\n//       </StyledWeatherInfoDiv>\n//     </WeatherCardWrapper>\n//   );\n// };\n\n// export default WeatherCard;\n"],"mappings":"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AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}