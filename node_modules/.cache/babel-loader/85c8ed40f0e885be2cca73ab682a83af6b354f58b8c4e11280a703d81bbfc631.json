{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{toast}from\"react-toastify\";import{useDispatch,useSelector}from\"react-redux\";import{getWeatherThunk}from\"../redux/thunksAPI\";import WeatherCard from\"../Weather/WeatherCard\";import{addToFavorites}from\"../redux/slice\";import{selectWeather}from\"../redux/selectors\";import{nanoid}from\"nanoid\";import{SearchBarWrapper,StyledAddBtn}from\"./SearchBar.styled\";import{AsyncPaginate}from\"react-select-async-paginate\";import{fetchWeatherData}from\"../../service/api\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const SearchBar=_ref=>{var _weatherData$list;let{location}=_ref;const[loading,setLoading]=useState(false);const[selectedCity,setSelectedCity]=useState(null);// const [selectedCityFromSearch, setSelectedCityFromSearch] = useState(null);\nconst dispatch=useDispatch();const weatherData=useSelector(selectWeather);useEffect(()=>{if(selectedCity){dispatch(getWeatherThunk(selectedCity.label));}},[dispatch,selectedCity]);// const loadOptions = async (inputValue, loadedOptions) => {\n//   if (inputValue.trim() === \"\") {\n//     return { options: [] };\n//   }\n//   try {\n//     setLoading(true);\n//     const response = await fetch(\n//       `https://api.openweathermap.org/geo/1.0/direct?q=${inputValue}&limit=5&appid=18431911169fef4afbe92c0ef62b8409`\n//     );\n//     const data = await response.json();\n//     const options = data.map((city) => ({\n//       value: `${city.name}, ${city.country}`,\n//       label: `${city.name}, ${city.country}`,\n//     }));\n//     return { options };\n//   } catch (error) {\n//     console.error(\"Error fetching data:\", error);\n//     return { options: [] };\n//   } finally {\n//     setLoading(false);\n//   }\n// };\nconst loadOptions=async(inputValue,loadedOptions)=>{if(inputValue.trim()===\"\"){return{options:[]};}try{setLoading(true);const options=await fetchWeatherData(inputValue);return{options};}finally{setLoading(false);}};const handleCitySelect=selectedOption=>{setSelectedCity(selectedOption);};const handleAddClick=()=>{if(selectedCity){dispatch(addToFavorites(weatherData));setSelectedCity(null);toast.success(\"Weather card successfully added to favorites\");}else{toast.info(\"Please select a city before adding\");}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(SearchBarWrapper,{children:[/*#__PURE__*/_jsx(AsyncPaginate,{value:selectedCity,loadOptions:loadOptions,onChange:handleCitySelect,isClearable:true,isLoading:loading,placeholder:\"Type a city name...\",styles:customStyles}),/*#__PURE__*/_jsx(StyledAddBtn,{onClick:handleAddClick,children:\"Add\"})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"ul\",{children:(!location||location===\"\")&&/*#__PURE__*/_jsx(\"div\",{children:weatherData===null||weatherData===void 0?void 0:(_weatherData$list=weatherData.list)===null||_weatherData$list===void 0?void 0:_weatherData$list.slice(0,1).map(weatherDataItem=>/*#__PURE__*/_jsx(WeatherCard,{weatherData:weatherDataItem},nanoid()))})})})]});};export default SearchBar;const customStyles={control:(provided,state)=>({...provided,borderColor:state.isFocused?\"#00ff00\":\"#cccccc\",backgroundColor:\"#FFFFFF\",backgroundPosition:\"0% 0%\",backgroundRepeat:\"no-repeat\",boxShadow:\"0px 3px 6px #00000029\",borderRadius:\"5px\",border:\"none\",width:\"659px\"}),indicatorSeparator:(provided,state)=>({...provided,display:\"none\"}),dropdownIndicator:(provided,state)=>({...provided,display:\"none\"}),option:(provided,state)=>({...provided,color:state.isSelected?\"#666666\":\"inherit\",backgroundColor:state.isFocused?\"#F2F2F2\":\"inherit\"})};","map":{"version":3,"names":["React","useEffect","useState","toast","useDispatch","useSelector","getWeatherThunk","WeatherCard","addToFavorites","selectWeather","nanoid","SearchBarWrapper","StyledAddBtn","AsyncPaginate","fetchWeatherData","jsx","_jsx","jsxs","_jsxs","SearchBar","_ref","_weatherData$list","location","loading","setLoading","selectedCity","setSelectedCity","dispatch","weatherData","label","loadOptions","inputValue","loadedOptions","trim","options","handleCitySelect","selectedOption","handleAddClick","success","info","children","value","onChange","isClearable","isLoading","placeholder","styles","customStyles","onClick","list","slice","map","weatherDataItem","control","provided","state","borderColor","isFocused","backgroundColor","backgroundPosition","backgroundRepeat","boxShadow","borderRadius","border","width","indicatorSeparator","display","dropdownIndicator","option","color","isSelected"],"sources":["/Users/yelezaveta/Desktop/Без названия/src/components/SearchBar/SearchBar.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getWeatherThunk } from \"../redux/thunksAPI\";\nimport WeatherCard from \"../Weather/WeatherCard\";\nimport { addToFavorites } from \"../redux/slice\";\nimport { selectWeather } from \"../redux/selectors\";\nimport { nanoid } from \"nanoid\";\nimport { SearchBarWrapper, StyledAddBtn } from \"./SearchBar.styled\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { fetchWeatherData } from \"../../service/api\";\n\nconst SearchBar = ({ location }) => {\n  const [loading, setLoading] = useState(false);\n  const [selectedCity, setSelectedCity] = useState(null);\n  // const [selectedCityFromSearch, setSelectedCityFromSearch] = useState(null);\n\n  const dispatch = useDispatch();\n  const weatherData = useSelector(selectWeather);\n\n  useEffect(() => {\n    if (selectedCity) {\n      dispatch(getWeatherThunk(selectedCity.label));\n    }\n  }, [dispatch, selectedCity]);\n\n  // const loadOptions = async (inputValue, loadedOptions) => {\n  //   if (inputValue.trim() === \"\") {\n  //     return { options: [] };\n  //   }\n\n  //   try {\n  //     setLoading(true);\n  //     const response = await fetch(\n  //       `https://api.openweathermap.org/geo/1.0/direct?q=${inputValue}&limit=5&appid=18431911169fef4afbe92c0ef62b8409`\n  //     );\n  //     const data = await response.json();\n  //     const options = data.map((city) => ({\n  //       value: `${city.name}, ${city.country}`,\n  //       label: `${city.name}, ${city.country}`,\n  //     }));\n  //     return { options };\n  //   } catch (error) {\n  //     console.error(\"Error fetching data:\", error);\n  //     return { options: [] };\n  //   } finally {\n  //     setLoading(false);\n  //   }\n  // };\n\n  const loadOptions = async (inputValue, loadedOptions) => {\n    if (inputValue.trim() === \"\") {\n      return { options: [] };\n    }\n\n    try {\n      setLoading(true);\n      const options = await fetchWeatherData(inputValue);\n      return { options };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCitySelect = (selectedOption) => {\n    setSelectedCity(selectedOption);\n  };\n\n  const handleAddClick = () => {\n    if (selectedCity) {\n      dispatch(addToFavorites(weatherData));\n      setSelectedCity(null);\n      toast.success(\"Weather card successfully added to favorites\");\n    } else {\n      toast.info(\"Please select a city before adding\");\n    }\n  };\n\n  return (\n    <div>\n      <SearchBarWrapper>\n        <AsyncPaginate\n          value={selectedCity}\n          loadOptions={loadOptions}\n          onChange={handleCitySelect}\n          isClearable={true}\n          isLoading={loading}\n          placeholder=\"Type a city name...\"\n          styles={customStyles}\n        />\n        <StyledAddBtn onClick={handleAddClick}>Add</StyledAddBtn>\n      </SearchBarWrapper>\n\n      <div>\n        <ul>\n          {(!location || location === \"\") && (\n            <div>\n              {weatherData?.list?.slice(0, 1).map((weatherDataItem) => (\n                <WeatherCard key={nanoid()} weatherData={weatherDataItem} />\n              ))}\n            </div>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchBar;\n\nconst customStyles = {\n  control: (provided, state) => ({\n    ...provided,\n    borderColor: state.isFocused ? \"#00ff00\" : \"#cccccc\",\n    backgroundColor: \"#FFFFFF\",\n    backgroundPosition: \"0% 0%\",\n    backgroundRepeat: \"no-repeat\",\n    boxShadow: \"0px 3px 6px #00000029\",\n    borderRadius: \"5px\",\n    border: \"none\",\n    width: \"659px\",\n  }),\n  indicatorSeparator: (provided, state) => ({\n    ...provided,\n    display: \"none\",\n  }),\n  dropdownIndicator: (provided, state) => ({\n    ...provided,\n    display: \"none\",\n  }),\n  option: (provided, state) => ({\n    ...provided,\n    color: state.isSelected ? \"#666666\" : \"inherit\",\n    backgroundColor: state.isFocused ? \"#F2F2F2\" : \"inherit\",\n  }),\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}