{"ast":null,"code":"var _jsxFileName = \"/Users/yelezaveta/Desktop/\\u0411\\u0435\\u0437 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u044F/src/components/SearchBar/SearchBar.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { getWeatherThunk } from \"../redux/thunksAPI\";\n// import WeatherCard from \"../Weather/WeatherCard\";\n// import { addToFavorites } from \"../redux/slice\";\n// import { selectWeather } from \"../redux/selectors\";\n// import { nanoid } from \"nanoid\";\n// import { StyledInput } from \"./SearchBar.styled\";\n\n// import Select from \"react-select\";\n\n// const SearchBar = () => {\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [selectedCity, setSelectedCity] = useState(null);\n\n//   const dispatch = useDispatch();\n//   const weatherData = useSelector(selectWeather);\n//   // const favorites = useSelector(selectFavorites);\n//   console.log(\"weatherData::\", weatherData);\n\n//   useEffect(() => {\n//     dispatch(getWeatherThunk(searchTerm));\n//   }, [dispatch, searchTerm]);\n\n//   const handleInputChange = async (event) => {\n//     const value = event.target.value;\n//     setSearchTerm(value);\n//     if (value.trim() === \"\") {\n//       setSearchResults([]);\n//       return;\n//     }\n//     setLoading(true);\n//     try {\n//       const response = await fetch(\n//         `https://api.openweathermap.org/geo/1.0/direct?q=${value}&limit=5&appid=18431911169fef4afbe92c0ef62b8409`\n//       );\n//       const data = await response.json();\n//       setSearchResults(data);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//     setLoading(false);\n//   };\n\n//   // const handleKeyPress = (event) => {\n//   //   if (event.key === \"Enter\") {\n//   //     if (selectedCity) {\n//   //       console.log(\"Show weather card for selected city:\", selectedCity);\n//   //     } else {\n//   //       console.log(\"Show city list\");\n//   //     }\n//   //   }\n//   // };\n\n//   const handleCitySelect = (city) => {\n//     setSelectedCity(city);\n//     setSearchResults([]);\n//     setSearchTerm(\"\"); // якщо треба глянем\n//   };\n\n//   // const handleAddClick = () => {\n//   //   if (selectedCity) {\n//   //     onAddToFavorites(selectedCity);\n//   //     dispatch(addToFavorites(selectedCity));\n//   //     setSelectedCity(null);\n//   //   }\n//   // };\n\n//   const handleAddClick = () => {\n//     if (selectedCity) {\n//       dispatch(addToFavorites(weatherData));\n//       setSelectedCity(null);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <StyledInput\n//         type=\"text\"\n//         value={searchTerm}\n//         onChange={handleInputChange}\n//         // onKeyDown={handleKeyPress}\n//         placeholder=\"Type a city name...\"\n//       />\n//       <div>\n//         {/* {loading && <p>Loading...</p>} */}\n//         {/* {!loading && searchResults.length === 0 && <p>No results found.</p>} */}\n//         {searchResults?.map((city) => (\n//           <div key={nanoid()} onClick={() => handleCitySelect(city)}>\n//             {city.name}\n//           </div>\n//         ))}\n//         {selectedCity && (\n//           <WeatherCard\n//             key={nanoid()}\n//             city={selectedCity.name}\n//             temperature={selectedCity.temperature}\n//             wind={selectedCity.wind}\n//             humidity={selectedCity.humidity}\n//           />\n//         )}\n//         <button onClick={handleAddClick}>Add</button>\n//       </div>\n\n//       <div>\n//         <ul>\n//           {selectedCity && (\n//             <div>\n//               {/* {weatherData?.list.map((weatherDataItem) => ( */}\n//               {weatherData?.list.slice(0, 1).map((weatherDataItem) => (\n//                 <WeatherCard key={nanoid()} weatherData={weatherDataItem} />\n//               ))}\n//             </div>\n//           )}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SearchBar;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getWeatherThunk } from \"../redux/thunksAPI\";\nimport WeatherCard from \"../Weather/WeatherCard\";\nimport { addToFavorites } from \"../redux/slice\";\nimport { selectWeather } from \"../redux/selectors\";\nimport { nanoid } from \"nanoid\";\nimport Select from \"react-select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = () => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedCity, setSelectedCity] = useState(null);\n  const dispatch = useDispatch();\n  const weatherData = useSelector(selectWeather);\n  useEffect(() => {\n    dispatch(getWeatherThunk(searchTerm));\n  }, [dispatch, searchTerm]);\n  const handleInputChange = async value => {\n    setSearchTerm(value);\n    if (value.trim() === \"\") {\n      setSearchResults([]);\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${value}&limit=5&appid=18431911169fef4afbe92c0ef62b8409`);\n      const data = await response.json();\n      setSearchResults(data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n    setLoading(false);\n  };\n  const customStyles = {\n    input: provided => ({\n      ...provided,\n      borderRadius: \"4px\",\n      border: \"1px solid #ced4da\",\n      padding: \"8px\"\n    })\n  };\n  const handleCitySelect = city => {\n    setSelectedCity(city);\n    setSearchResults([]);\n    setSearchTerm(\"\");\n  };\n  const handleAddClick = () => {\n    if (selectedCity) {\n      dispatch(addToFavorites(weatherData));\n      setSelectedCity(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      value: searchTerm,\n      onChange: selectedOption => handleInputChange(selectedOption.value),\n      onInputChange: inputValue => handleInputChange(inputValue),\n      options: searchResults.map(city => ({\n        value: city.name,\n        label: city.name\n      })),\n      isLoading: loading,\n      placeholder: \"Type a city name...\",\n      styles: customStyles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [selectedCity && /*#__PURE__*/_jsxDEV(WeatherCard, {\n        city: selectedCity.name,\n        temperature: selectedCity.temperature,\n        wind: selectedCity.wind,\n        humidity: selectedCity.humidity\n      }, nanoid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddClick,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: selectedCity && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: weatherData === null || weatherData === void 0 ? void 0 : weatherData.list.slice(0, 1).map(weatherDataItem => /*#__PURE__*/_jsxDEV(WeatherCard, {\n            weatherData: weatherDataItem\n          }, nanoid(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"EjnEESCLv9U7OkGCpRH4Qd/+5O0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","getWeatherThunk","WeatherCard","addToFavorites","selectWeather","nanoid","Select","jsxDEV","_jsxDEV","SearchBar","_s","searchTerm","setSearchTerm","searchResults","setSearchResults","loading","setLoading","selectedCity","setSelectedCity","dispatch","weatherData","handleInputChange","value","trim","response","fetch","data","json","error","console","customStyles","input","provided","borderRadius","border","padding","handleCitySelect","city","handleAddClick","children","onChange","selectedOption","onInputChange","inputValue","options","map","name","label","isLoading","placeholder","styles","fileName","_jsxFileName","lineNumber","columnNumber","temperature","wind","humidity","onClick","list","slice","weatherDataItem","_c","$RefreshReg$"],"sources":["/Users/yelezaveta/Desktop/Без названия/src/components/SearchBar/SearchBar.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { getWeatherThunk } from \"../redux/thunksAPI\";\n// import WeatherCard from \"../Weather/WeatherCard\";\n// import { addToFavorites } from \"../redux/slice\";\n// import { selectWeather } from \"../redux/selectors\";\n// import { nanoid } from \"nanoid\";\n// import { StyledInput } from \"./SearchBar.styled\";\n\n// import Select from \"react-select\";\n\n// const SearchBar = () => {\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [selectedCity, setSelectedCity] = useState(null);\n\n//   const dispatch = useDispatch();\n//   const weatherData = useSelector(selectWeather);\n//   // const favorites = useSelector(selectFavorites);\n//   console.log(\"weatherData::\", weatherData);\n\n//   useEffect(() => {\n//     dispatch(getWeatherThunk(searchTerm));\n//   }, [dispatch, searchTerm]);\n\n//   const handleInputChange = async (event) => {\n//     const value = event.target.value;\n//     setSearchTerm(value);\n//     if (value.trim() === \"\") {\n//       setSearchResults([]);\n//       return;\n//     }\n//     setLoading(true);\n//     try {\n//       const response = await fetch(\n//         `https://api.openweathermap.org/geo/1.0/direct?q=${value}&limit=5&appid=18431911169fef4afbe92c0ef62b8409`\n//       );\n//       const data = await response.json();\n//       setSearchResults(data);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//     setLoading(false);\n//   };\n\n//   // const handleKeyPress = (event) => {\n//   //   if (event.key === \"Enter\") {\n//   //     if (selectedCity) {\n//   //       console.log(\"Show weather card for selected city:\", selectedCity);\n//   //     } else {\n//   //       console.log(\"Show city list\");\n//   //     }\n//   //   }\n//   // };\n\n//   const handleCitySelect = (city) => {\n//     setSelectedCity(city);\n//     setSearchResults([]);\n//     setSearchTerm(\"\"); // якщо треба глянем\n//   };\n\n//   // const handleAddClick = () => {\n//   //   if (selectedCity) {\n//   //     onAddToFavorites(selectedCity);\n//   //     dispatch(addToFavorites(selectedCity));\n//   //     setSelectedCity(null);\n//   //   }\n//   // };\n\n//   const handleAddClick = () => {\n//     if (selectedCity) {\n//       dispatch(addToFavorites(weatherData));\n//       setSelectedCity(null);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <StyledInput\n//         type=\"text\"\n//         value={searchTerm}\n//         onChange={handleInputChange}\n//         // onKeyDown={handleKeyPress}\n//         placeholder=\"Type a city name...\"\n//       />\n//       <div>\n//         {/* {loading && <p>Loading...</p>} */}\n//         {/* {!loading && searchResults.length === 0 && <p>No results found.</p>} */}\n//         {searchResults?.map((city) => (\n//           <div key={nanoid()} onClick={() => handleCitySelect(city)}>\n//             {city.name}\n//           </div>\n//         ))}\n//         {selectedCity && (\n//           <WeatherCard\n//             key={nanoid()}\n//             city={selectedCity.name}\n//             temperature={selectedCity.temperature}\n//             wind={selectedCity.wind}\n//             humidity={selectedCity.humidity}\n//           />\n//         )}\n//         <button onClick={handleAddClick}>Add</button>\n//       </div>\n\n//       <div>\n//         <ul>\n//           {selectedCity && (\n//             <div>\n//               {/* {weatherData?.list.map((weatherDataItem) => ( */}\n//               {weatherData?.list.slice(0, 1).map((weatherDataItem) => (\n//                 <WeatherCard key={nanoid()} weatherData={weatherDataItem} />\n//               ))}\n//             </div>\n//           )}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SearchBar;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getWeatherThunk } from \"../redux/thunksAPI\";\nimport WeatherCard from \"../Weather/WeatherCard\";\nimport { addToFavorites } from \"../redux/slice\";\nimport { selectWeather } from \"../redux/selectors\";\nimport { nanoid } from \"nanoid\";\nimport Select from \"react-select\";\n\nconst SearchBar = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedCity, setSelectedCity] = useState(null);\n\n  const dispatch = useDispatch();\n  const weatherData = useSelector(selectWeather);\n\n  useEffect(() => {\n    dispatch(getWeatherThunk(searchTerm));\n  }, [dispatch, searchTerm]);\n\n  const handleInputChange = async (value) => {\n    setSearchTerm(value);\n    if (value.trim() === \"\") {\n      setSearchResults([]);\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch(\n        `https://api.openweathermap.org/geo/1.0/direct?q=${value}&limit=5&appid=18431911169fef4afbe92c0ef62b8409`\n      );\n      const data = await response.json();\n      setSearchResults(data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n    setLoading(false);\n  };\n\n  const customStyles = {\n    input: (provided) => ({\n      ...provided,\n      borderRadius: \"4px\",\n      border: \"1px solid #ced4da\",\n      padding: \"8px\",\n    }),\n  };\n\n  const handleCitySelect = (city) => {\n    setSelectedCity(city);\n    setSearchResults([]);\n    setSearchTerm(\"\");\n  };\n\n  const handleAddClick = () => {\n    if (selectedCity) {\n      dispatch(addToFavorites(weatherData));\n      setSelectedCity(null);\n    }\n  };\n\n  return (\n    <div>\n      <Select\n        value={searchTerm}\n        onChange={(selectedOption) => handleInputChange(selectedOption.value)}\n        onInputChange={(inputValue) => handleInputChange(inputValue)}\n        options={searchResults.map((city) => ({\n          value: city.name,\n          label: city.name,\n        }))}\n        isLoading={loading}\n        placeholder=\"Type a city name...\"\n        styles={customStyles}\n      />\n      <div>\n        {selectedCity && (\n          <WeatherCard\n            key={nanoid()}\n            city={selectedCity.name}\n            temperature={selectedCity.temperature}\n            wind={selectedCity.wind}\n            humidity={selectedCity.humidity}\n          />\n        )}\n        <button onClick={handleAddClick}>Add</button>\n      </div>\n\n      <div>\n        <ul>\n          {selectedCity && (\n            <div>\n              {weatherData?.list.slice(0, 1).map((weatherDataItem) => (\n                <WeatherCard key={nanoid()} weatherData={weatherDataItem} />\n              ))}\n            </div>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchBar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}