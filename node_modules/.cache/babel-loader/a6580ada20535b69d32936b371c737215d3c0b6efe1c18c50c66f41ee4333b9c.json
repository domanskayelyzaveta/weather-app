{"ast":null,"code":"var _jsxFileName = \"/Users/yelezaveta/Desktop/\\u0411\\u0435\\u0437 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u044F/src/components/Chart/Chart.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import ApexChart from \"react-apexcharts\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { selectWeather } from \"../redux/selectors\";\n// import { StyledChartWrapper } from \"./Chart.styled\";\n// import { getWeatherThunk } from \"../redux/thunksAPI\";\n\n// const Chart = () => {\n//   const [chartData, setChartData] = useState([]);\n//   const dispatch = useDispatch();\n\n//   const weather = useSelector(selectWeather);\n//   const weatherData = weather.list;\n//   console.log(\"weatherLIST:\", weatherData);\n\n//   useEffect(() => {\n//     dispatch(getWeatherThunk(\"\"));\n//   }, [dispatch]);\n\n//   useEffect(() => {\n//     if (weatherData?.length > 0) {\n//       const temperatureData = weatherData.slice(0, 8).map((item) => ({\n//         x: new Date(item.dt * 1000).toLocaleDateString(\"en-US\", {\n//           month: \"short\",\n//           day: \"numeric\",\n//         }),\n//         y: item.main.temp,\n//       }));\n\n//       setChartData(temperatureData);\n//     }\n//   }, [weatherData]);\n\n//   const processTemperatureData = (data) => {\n//     return data.map((dataPoint) => ({\n//       x: dataPoint.x,\n//       y: dataPoint.y < 0 ? -dataPoint.y : dataPoint.y,\n//     }));\n//   };\n\n//   const options = {\n//     stroke: {\n//       width: 0,\n//       curve: \"smooth\",\n//     },\n//     foreignObject: {\n//       height: \"70px\",\n//     },\n//     chart: {\n//       id: \"weather-chart\",\n//       toolbar: {\n//         show: false,\n//       },\n//       height: 80,\n//       // height: \"62px\",\n//       background: \"transparent\",\n//     },\n//     dataLabels: {\n//       enabled: true,\n//       background: \"transparent\",\n\n//       style: {\n//         colors: [\"#C5C5C5\"],\n//         fontSize: \"6px\",\n//         fontFamily: \"Jost\",\n//       },\n//       offsetY: -4,\n//     },\n//     yaxis: {\n//       labels: {\n//         show: false,\n//       },\n//       axisBorder: {\n//         width: 0.1,\n//         color: \"red\",\n//       },\n//     },\n//     fill: {\n//       type: \"gradient\",\n//       gradient: {\n//         shadeIntensity: 1,\n//         opacityFrom: 0.8,\n//         opacityTo: 0.9,\n//       },\n//     },\n//     xaxis: {\n//       categories: chartData.map((dataPoint) => dataPoint.x),\n//       axisBorder: {\n//         show: false,\n//       },\n//       labels: {\n//         offsetY: -6,\n//         style: {\n//           colors: \"#C5C5C5\",\n//           fontSize: \"6px\",\n//           fontFamily: \"Jost\",\n//         },\n//       },\n//     },\n//     grid: {\n//       show: false,\n//     },\n//     tickAmount: 0,\n//   };\n\n//   const series = [\n//     {\n//       name: \"Temperature\",\n//       data: processTemperatureData(chartData).map((dataPoint) => dataPoint.y),\n//       color: \"#5B8CFF\",\n//     },\n//   ];\n\n//   return (\n//     <StyledChartWrapper>\n//       <ApexChart options={options} series={series} type=\"area\" height={70} />\n//     </StyledChartWrapper>\n//   );\n// };\n\n// export default Chart;\n\nimport React, { useEffect, useState } from \"react\";\nimport ApexChart from \"react-apexcharts\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectWeather } from \"../redux/selectors\";\nimport { StyledChartWrapper } from \"./Chart.styled\";\nimport { getWeatherThunk } from \"../redux/thunksAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chart = ({\n  data\n}) => {\n  _s();\n  var _weather$main;\n  const [chartData, setChartData] = useState([]);\n  const dispatch = useDispatch();\n  const weather = useSelector(selectWeather);\n  const weatherData = weather.list;\n  console.log(\"weatherLIST:\", weatherData);\n  const temperatureO = weather === null || weather === void 0 ? void 0 : (_weather$main = weather.main) === null || _weather$main === void 0 ? void 0 : _weather$main.temp;\n  console.log(\"TEMP:\", temperatureO);\n  useEffect(() => {\n    dispatch(getWeatherThunk(\"\"));\n  }, [dispatch]);\n  useEffect(() => {\n    if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n      const temperatureData = data.slice(0, 8).map(item => ({\n        x: new Date(item.dt * 1000).toLocaleDateString(\"en-US\", {\n          month: \"short\",\n          day: \"numeric\"\n        }),\n        y: item.main.temp\n      }));\n      setChartData(temperatureData);\n    }\n  }, [data]);\n  const processTemperatureData = data => {\n    return data.map(dataPoint => ({\n      x: dataPoint.x,\n      y: dataPoint.y < 0 ? -dataPoint.y : dataPoint.y\n    }));\n  };\n  const options = {\n    stroke: {\n      width: 0,\n      curve: \"smooth\"\n    },\n    foreignObject: {\n      height: \"70px\"\n    },\n    chart: {\n      id: \"weather-chart\",\n      toolbar: {\n        show: false\n      },\n      height: 80,\n      // height: \"62px\",\n      background: \"transparent\"\n    },\n    dataLabels: {\n      enabled: true,\n      background: \"transparent\",\n      style: {\n        colors: [\"#C5C5C5\"],\n        fontSize: \"6px\",\n        fontFamily: \"Jost\"\n      },\n      offsetY: -4\n    },\n    yaxis: {\n      tickAmount: 20,\n      labels: {\n        show: false\n      },\n      axisBorder: {\n        width: 0.1,\n        color: \"red\"\n      }\n    },\n    fill: {\n      type: \"gradient\",\n      gradient: {\n        shadeIntensity: 1,\n        opacityFrom: 0.8,\n        opacityTo: 0.9\n      }\n    },\n    xaxis: {\n      categories: chartData.map(dataPoint => dataPoint.x),\n      axisBorder: {\n        show: false\n      },\n      labels: {\n        offsetY: -6,\n        style: {\n          colors: \"#C5C5C5\",\n          fontSize: \"6px\",\n          fontFamily: \"Jost\"\n        }\n      }\n    },\n    grid: {\n      show: false\n    },\n    tickAmount: 0\n  };\n  const series = [{\n    name: \"Temperature\",\n    data: processTemperatureData(chartData).map(dataPoint => dataPoint.y),\n    color: chartData.some(dataPoint => dataPoint.y > 0) ? \"#FFA25B\" : \"#5B8CFF\",\n    stroke: {\n      curve: \"smooth\"\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(StyledChartWrapper, {\n    children: /*#__PURE__*/_jsxDEV(ApexChart, {\n      options: options,\n      series: series,\n      type: \"area\",\n      width: 343,\n      height: 90\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n};\n_s(Chart, \"uhhC/Dyc+sfiULuVCv8RGA+Ei/0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","useEffect","useState","ApexChart","useDispatch","useSelector","selectWeather","StyledChartWrapper","getWeatherThunk","jsxDEV","_jsxDEV","Chart","data","_s","_weather$main","chartData","setChartData","dispatch","weather","weatherData","list","console","log","temperatureO","main","temp","length","temperatureData","slice","map","item","x","Date","dt","toLocaleDateString","month","day","y","processTemperatureData","dataPoint","options","stroke","width","curve","foreignObject","height","chart","id","toolbar","show","background","dataLabels","enabled","style","colors","fontSize","fontFamily","offsetY","yaxis","tickAmount","labels","axisBorder","color","fill","type","gradient","shadeIntensity","opacityFrom","opacityTo","xaxis","categories","grid","series","name","some","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yelezaveta/Desktop/Без названия/src/components/Chart/Chart.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import ApexChart from \"react-apexcharts\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { selectWeather } from \"../redux/selectors\";\n// import { StyledChartWrapper } from \"./Chart.styled\";\n// import { getWeatherThunk } from \"../redux/thunksAPI\";\n\n// const Chart = () => {\n//   const [chartData, setChartData] = useState([]);\n//   const dispatch = useDispatch();\n\n//   const weather = useSelector(selectWeather);\n//   const weatherData = weather.list;\n//   console.log(\"weatherLIST:\", weatherData);\n\n//   useEffect(() => {\n//     dispatch(getWeatherThunk(\"\"));\n//   }, [dispatch]);\n\n//   useEffect(() => {\n//     if (weatherData?.length > 0) {\n//       const temperatureData = weatherData.slice(0, 8).map((item) => ({\n//         x: new Date(item.dt * 1000).toLocaleDateString(\"en-US\", {\n//           month: \"short\",\n//           day: \"numeric\",\n//         }),\n//         y: item.main.temp,\n//       }));\n\n//       setChartData(temperatureData);\n//     }\n//   }, [weatherData]);\n\n//   const processTemperatureData = (data) => {\n//     return data.map((dataPoint) => ({\n//       x: dataPoint.x,\n//       y: dataPoint.y < 0 ? -dataPoint.y : dataPoint.y,\n//     }));\n//   };\n\n//   const options = {\n//     stroke: {\n//       width: 0,\n//       curve: \"smooth\",\n//     },\n//     foreignObject: {\n//       height: \"70px\",\n//     },\n//     chart: {\n//       id: \"weather-chart\",\n//       toolbar: {\n//         show: false,\n//       },\n//       height: 80,\n//       // height: \"62px\",\n//       background: \"transparent\",\n//     },\n//     dataLabels: {\n//       enabled: true,\n//       background: \"transparent\",\n\n//       style: {\n//         colors: [\"#C5C5C5\"],\n//         fontSize: \"6px\",\n//         fontFamily: \"Jost\",\n//       },\n//       offsetY: -4,\n//     },\n//     yaxis: {\n//       labels: {\n//         show: false,\n//       },\n//       axisBorder: {\n//         width: 0.1,\n//         color: \"red\",\n//       },\n//     },\n//     fill: {\n//       type: \"gradient\",\n//       gradient: {\n//         shadeIntensity: 1,\n//         opacityFrom: 0.8,\n//         opacityTo: 0.9,\n//       },\n//     },\n//     xaxis: {\n//       categories: chartData.map((dataPoint) => dataPoint.x),\n//       axisBorder: {\n//         show: false,\n//       },\n//       labels: {\n//         offsetY: -6,\n//         style: {\n//           colors: \"#C5C5C5\",\n//           fontSize: \"6px\",\n//           fontFamily: \"Jost\",\n//         },\n//       },\n//     },\n//     grid: {\n//       show: false,\n//     },\n//     tickAmount: 0,\n//   };\n\n//   const series = [\n//     {\n//       name: \"Temperature\",\n//       data: processTemperatureData(chartData).map((dataPoint) => dataPoint.y),\n//       color: \"#5B8CFF\",\n//     },\n//   ];\n\n//   return (\n//     <StyledChartWrapper>\n//       <ApexChart options={options} series={series} type=\"area\" height={70} />\n//     </StyledChartWrapper>\n//   );\n// };\n\n// export default Chart;\n\nimport React, { useEffect, useState } from \"react\";\nimport ApexChart from \"react-apexcharts\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectWeather } from \"../redux/selectors\";\nimport { StyledChartWrapper } from \"./Chart.styled\";\nimport { getWeatherThunk } from \"../redux/thunksAPI\";\n\nconst Chart = ({ data }) => {\n  const [chartData, setChartData] = useState([]);\n  const dispatch = useDispatch();\n\n  const weather = useSelector(selectWeather);\n  const weatherData = weather.list;\n  console.log(\"weatherLIST:\", weatherData);\n  const temperatureO = weather?.main?.temp;\n  console.log(\"TEMP:\", temperatureO);\n\n  useEffect(() => {\n    dispatch(getWeatherThunk(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (data?.length > 0) {\n      const temperatureData = data.slice(0, 8).map((item) => ({\n        x: new Date(item.dt * 1000).toLocaleDateString(\"en-US\", {\n          month: \"short\",\n          day: \"numeric\",\n        }),\n        y: item.main.temp,\n      }));\n\n      setChartData(temperatureData);\n    }\n  }, [data]);\n\n  const processTemperatureData = (data) => {\n    return data.map((dataPoint) => ({\n      x: dataPoint.x,\n      y: dataPoint.y < 0 ? -dataPoint.y : dataPoint.y,\n    }));\n  };\n\n  const options = {\n    stroke: {\n      width: 0,\n      curve: \"smooth\",\n    },\n    foreignObject: {\n      height: \"70px\",\n    },\n    chart: {\n      id: \"weather-chart\",\n      toolbar: {\n        show: false,\n      },\n      height: 80,\n      // height: \"62px\",\n      background: \"transparent\",\n    },\n    dataLabels: {\n      enabled: true,\n      background: \"transparent\",\n\n      style: {\n        colors: [\"#C5C5C5\"],\n        fontSize: \"6px\",\n        fontFamily: \"Jost\",\n      },\n      offsetY: -4,\n    },\n    yaxis: {\n      tickAmount: 20,\n      labels: {\n        show: false,\n      },\n      axisBorder: {\n        width: 0.1,\n        color: \"red\",\n      },\n    },\n    fill: {\n      type: \"gradient\",\n      gradient: {\n        shadeIntensity: 1,\n        opacityFrom: 0.8,\n        opacityTo: 0.9,\n      },\n    },\n    xaxis: {\n      categories: chartData.map((dataPoint) => dataPoint.x),\n      axisBorder: {\n        show: false,\n      },\n      labels: {\n        offsetY: -6,\n        style: {\n          colors: \"#C5C5C5\",\n          fontSize: \"6px\",\n          fontFamily: \"Jost\",\n        },\n      },\n    },\n    grid: {\n      show: false,\n    },\n    tickAmount: 0,\n  };\n\n  const series = [\n    {\n      name: \"Temperature\",\n      data: processTemperatureData(chartData).map((dataPoint) => dataPoint.y),\n      color: chartData.some((dataPoint) => dataPoint.y > 0)\n        ? \"#FFA25B\"\n        : \"#5B8CFF\",\n      stroke: {\n        curve: \"smooth\",\n      },\n    },\n  ];\n\n  return (\n    <StyledChartWrapper>\n      <ApexChart\n        options={options}\n        series={series}\n        type=\"area\"\n        width={343}\n        height={90}\n      />\n    </StyledChartWrapper>\n  );\n};\n\nexport default Chart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}