{"ast":null,"code":"var _jsxFileName = \"/Users/yelezaveta/Desktop/\\u0411\\u0435\\u0437 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u044F/src/components/SearchBar/SearchBar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getWeatherThunk } from \"../redux/thunksAPI\";\nimport WeatherCard from \"../Weather/WeatherCard\";\nimport { addToFavorites } from \"../redux/slice\";\nimport { selectWeather } from \"../redux/selectors\";\nimport { nanoid } from \"nanoid\";\nimport { StyledInput } from \"./SearchBar.styled\";\nimport Select from \"react-select\";\n\n// const SearchBar = () => {\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [selectedCity, setSelectedCity] = useState(null);\n\n//   const dispatch = useDispatch();\n//   const weatherData = useSelector(selectWeather);\n//   // const favorites = useSelector(selectFavorites);\n//   console.log(\"weatherData::\", weatherData);\n\n//   useEffect(() => {\n//     dispatch(getWeatherThunk(searchTerm));\n//   }, [dispatch, searchTerm]);\n\n//   const handleInputChange = async (event) => {\n//     const value = event.target.value;\n//     setSearchTerm(value);\n//     if (value.trim() === \"\") {\n//       setSearchResults([]);\n//       return;\n//     }\n//     setLoading(true);\n//     try {\n//       const response = await fetch(\n//         `https://api.openweathermap.org/geo/1.0/direct?q=${value}&limit=5&appid=18431911169fef4afbe92c0ef62b8409`\n//       );\n//       const data = await response.json();\n//       setSearchResults(data);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//     setLoading(false);\n//   };\n\n//   // const handleKeyPress = (event) => {\n//   //   if (event.key === \"Enter\") {\n//   //     if (selectedCity) {\n//   //       console.log(\"Show weather card for selected city:\", selectedCity);\n//   //     } else {\n//   //       console.log(\"Show city list\");\n//   //     }\n//   //   }\n//   // };\n\n//   const handleCitySelect = (city) => {\n//     setSelectedCity(city);\n//     setSearchResults([]);\n//     setSearchTerm(\"\"); // якщо треба глянем\n//   };\n\n//   // const handleAddClick = () => {\n//   //   if (selectedCity) {\n//   //     onAddToFavorites(selectedCity);\n//   //     dispatch(addToFavorites(selectedCity));\n//   //     setSelectedCity(null);\n//   //   }\n//   // };\n\n//   const handleAddClick = () => {\n//     if (selectedCity) {\n//       dispatch(addToFavorites(weatherData));\n//       setSelectedCity(null);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <StyledInput\n//         type=\"text\"\n//         value={searchTerm}\n//         onChange={handleInputChange}\n//         // onKeyDown={handleKeyPress}\n//         placeholder=\"Type a city name...\"\n//       />\n//       <div>\n//         {/* {loading && <p>Loading...</p>} */}\n//         {/* {!loading && searchResults.length === 0 && <p>No results found.</p>} */}\n//         {searchResults?.map((city) => (\n//           <div key={nanoid()} onClick={() => handleCitySelect(city)}>\n//             {city.name}\n//           </div>\n//         ))}\n//         {selectedCity && (\n//           <WeatherCard\n//             key={nanoid()}\n//             city={selectedCity.name}\n//             temperature={selectedCity.temperature}\n//             wind={selectedCity.wind}\n//             humidity={selectedCity.humidity}\n//           />\n//         )}\n//         <button onClick={handleAddClick}>Add</button>\n//       </div>\n\n//       <div>\n//         <ul>\n//           {selectedCity && (\n//             <div>\n//               {/* {weatherData?.list.map((weatherDataItem) => ( */}\n//               {weatherData?.list.slice(0, 1).map((weatherDataItem) => (\n//                 <WeatherCard key={nanoid()} weatherData={weatherDataItem} />\n//               ))}\n//             </div>\n//           )}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SearchBar;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = () => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const dispatch = useDispatch();\n  const loadOptions = async inputValue => {\n    setSearchTerm(inputValue);\n    setLoading(true);\n    try {\n      const response = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${inputValue}&limit=10&appid=18431911169fef4afbe92c0ef62b8409`);\n      const data = await response.json();\n      const options = data.map(city => ({\n        value: city.name,\n        label: city.name\n      }));\n      return options;\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleChange = selectedOption => {\n    setSelectedOption(selectedOption);\n  };\n  return /*#__PURE__*/_jsxDEV(Select, {\n    value: selectedOption,\n    onChange: handleChange,\n    onInputChange: loadOptions,\n    isLoading: loading,\n    placeholder: \"Type a city name...\",\n    defaultOptions: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"LAHzKbenB7vsP833gfZpYKT7BlI=\", false, function () {\n  return [useDispatch];\n});\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","getWeatherThunk","WeatherCard","addToFavorites","selectWeather","nanoid","StyledInput","Select","jsxDEV","_jsxDEV","SearchBar","_s","searchTerm","setSearchTerm","loading","setLoading","selectedOption","setSelectedOption","dispatch","loadOptions","inputValue","response","fetch","data","json","options","map","city","value","name","label","error","console","handleChange","onChange","onInputChange","isLoading","placeholder","defaultOptions","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yelezaveta/Desktop/Без названия/src/components/SearchBar/SearchBar.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getWeatherThunk } from \"../redux/thunksAPI\";\nimport WeatherCard from \"../Weather/WeatherCard\";\nimport { addToFavorites } from \"../redux/slice\";\nimport { selectWeather } from \"../redux/selectors\";\nimport { nanoid } from \"nanoid\";\nimport { StyledInput } from \"./SearchBar.styled\";\n\nimport Select from \"react-select\";\n\n// const SearchBar = () => {\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [selectedCity, setSelectedCity] = useState(null);\n\n//   const dispatch = useDispatch();\n//   const weatherData = useSelector(selectWeather);\n//   // const favorites = useSelector(selectFavorites);\n//   console.log(\"weatherData::\", weatherData);\n\n//   useEffect(() => {\n//     dispatch(getWeatherThunk(searchTerm));\n//   }, [dispatch, searchTerm]);\n\n//   const handleInputChange = async (event) => {\n//     const value = event.target.value;\n//     setSearchTerm(value);\n//     if (value.trim() === \"\") {\n//       setSearchResults([]);\n//       return;\n//     }\n//     setLoading(true);\n//     try {\n//       const response = await fetch(\n//         `https://api.openweathermap.org/geo/1.0/direct?q=${value}&limit=5&appid=18431911169fef4afbe92c0ef62b8409`\n//       );\n//       const data = await response.json();\n//       setSearchResults(data);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//     setLoading(false);\n//   };\n\n//   // const handleKeyPress = (event) => {\n//   //   if (event.key === \"Enter\") {\n//   //     if (selectedCity) {\n//   //       console.log(\"Show weather card for selected city:\", selectedCity);\n//   //     } else {\n//   //       console.log(\"Show city list\");\n//   //     }\n//   //   }\n//   // };\n\n//   const handleCitySelect = (city) => {\n//     setSelectedCity(city);\n//     setSearchResults([]);\n//     setSearchTerm(\"\"); // якщо треба глянем\n//   };\n\n//   // const handleAddClick = () => {\n//   //   if (selectedCity) {\n//   //     onAddToFavorites(selectedCity);\n//   //     dispatch(addToFavorites(selectedCity));\n//   //     setSelectedCity(null);\n//   //   }\n//   // };\n\n//   const handleAddClick = () => {\n//     if (selectedCity) {\n//       dispatch(addToFavorites(weatherData));\n//       setSelectedCity(null);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <StyledInput\n//         type=\"text\"\n//         value={searchTerm}\n//         onChange={handleInputChange}\n//         // onKeyDown={handleKeyPress}\n//         placeholder=\"Type a city name...\"\n//       />\n//       <div>\n//         {/* {loading && <p>Loading...</p>} */}\n//         {/* {!loading && searchResults.length === 0 && <p>No results found.</p>} */}\n//         {searchResults?.map((city) => (\n//           <div key={nanoid()} onClick={() => handleCitySelect(city)}>\n//             {city.name}\n//           </div>\n//         ))}\n//         {selectedCity && (\n//           <WeatherCard\n//             key={nanoid()}\n//             city={selectedCity.name}\n//             temperature={selectedCity.temperature}\n//             wind={selectedCity.wind}\n//             humidity={selectedCity.humidity}\n//           />\n//         )}\n//         <button onClick={handleAddClick}>Add</button>\n//       </div>\n\n//       <div>\n//         <ul>\n//           {selectedCity && (\n//             <div>\n//               {/* {weatherData?.list.map((weatherDataItem) => ( */}\n//               {weatherData?.list.slice(0, 1).map((weatherDataItem) => (\n//                 <WeatherCard key={nanoid()} weatherData={weatherDataItem} />\n//               ))}\n//             </div>\n//           )}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SearchBar;\n\nconst SearchBar = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(null);\n\n  const dispatch = useDispatch();\n\n  const loadOptions = async (inputValue) => {\n    setSearchTerm(inputValue);\n    setLoading(true);\n    try {\n      const response = await fetch(\n        `https://api.openweathermap.org/geo/1.0/direct?q=${inputValue}&limit=10&appid=18431911169fef4afbe92c0ef62b8409`\n      );\n      const data = await response.json();\n      const options = data.map((city) => ({\n        value: city.name,\n        label: city.name,\n      }));\n      return options;\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (selectedOption) => {\n    setSelectedOption(selectedOption);\n  };\n\n  return (\n    <Select\n      value={selectedOption}\n      onChange={handleChange}\n      onInputChange={loadOptions}\n      isLoading={loading}\n      placeholder=\"Type a city name...\"\n      defaultOptions\n    />\n  );\n};\n\nexport default SearchBar;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,eAAe,QAAQ,oBAAoB;AACpD,OAAOC,WAAW,MAAM,wBAAwB;AAChD,SAASC,cAAc,QAAQ,gBAAgB;AAC/C,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,WAAW,QAAQ,oBAAoB;AAEhD,OAAOC,MAAM,MAAM,cAAc;;AAEjtB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACkB,cAAc,EAAEC,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAE1D,MAAMoB,QAAQ,GAAGnB,WAAW,CAAC,CAAC;EAE9B,MAAMoB,WAAW,GAAG,MAAOC,UAAU,IAAK;IACxCP,aAAa,CAACO,UAAU,CAAC;IACzBL,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CACzB,mDAAkDF,UAAW,kDAChE,CAAC;MACD,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,MAAMC,OAAO,GAAGF,IAAI,CAACG,GAAG,CAAEC,IAAI,KAAM;QAClCC,KAAK,EAAED,IAAI,CAACE,IAAI;QAChBC,KAAK,EAAEH,IAAI,CAACE;MACd,CAAC,CAAC,CAAC;MACH,OAAOJ,OAAO;IAChB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,EAAE;IACX,CAAC,SAAS;MACRhB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMkB,YAAY,GAAIjB,cAAc,IAAK;IACvCC,iBAAiB,CAACD,cAAc,CAAC;EACnC,CAAC;EAED,oBACEP,OAAA,CAACF,MAAM;IACLqB,KAAK,EAAEZ,cAAe;IACtBkB,QAAQ,EAAED,YAAa;IACvBE,aAAa,EAAEhB,WAAY;IAC3BiB,SAAS,EAAEtB,OAAQ;IACnBuB,WAAW,EAAC,qBAAqB;IACjCC,cAAc;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEN,CAAC;AAAC/B,EAAA,CA1CID,SAAS;EAAA,QAKIX,WAAW;AAAA;AAAA4C,EAAA,GALxBjC,SAAS;AA4Cf,eAAeA,SAAS;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}